<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/Main.java" />
              <option name="updatedContent" value="package university.jala.legion;&#10;&#10;import university.jala.legion.cli.Parameters;&#10;import university.jala.legion.model.Battlefield;&#10;import university.jala.legion.model.Character;&#10;import university.jala.legion.model.units.*;&#10;import university.jala.legion.sorting.SortingStrategy;&#10;import university.jala.legion.sorting.SortingStrategyFactory;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        try {&#10;            // Parse command line parameters&#10;            Parameters params = new Parameters(args);&#10;&#10;            // Create battlefield&#10;            Battlefield battlefield = new Battlefield(params.getBattlefieldSize());&#10;&#10;            // Create units based on distribution&#10;            List&lt;Character&gt; units = createUnits(params.getUnitDistribution());&#10;&#10;            // Place units randomly&#10;            battlefield.placeUnitsRandomly(units);&#10;&#10;            // Display initial battlefield&#10;            System.out.println(&quot;\nInitial Battlefield:&quot;);&#10;            System.out.println(battlefield.render(params.getType().equals(&quot;n&quot;)));&#10;&#10;            // Sort units&#10;            SortingStrategy sortingStrategy = SortingStrategyFactory.createStrategy(params.getAlgorithm());&#10;            System.out.println(&quot;\nApplying &quot; + sortingStrategy.getName() + &quot;...&quot;);&#10;            &#10;            long startTime = System.currentTimeMillis();&#10;            sortingStrategy.sort(units);&#10;            long endTime = System.currentTimeMillis();&#10;&#10;            // Apply new positions according to orientation&#10;            battlefield.applyNewPositions(units, params.getOrientation());&#10;&#10;            // Display final battlefield&#10;            System.out.println(&quot;\nFinal Battlefield:&quot;);&#10;            System.out.println(battlefield.render(params.getType().equals(&quot;n&quot;)));&#10;&#10;            // Display execution time&#10;            System.out.println(&quot;\nExecution time: &quot; + (endTime - startTime) + &quot;ms&quot;);&#10;&#10;        } catch (IllegalArgumentException e) {&#10;            System.err.println(&quot;Error: &quot; + e.getMessage());&#10;            System.exit(1);&#10;        }&#10;    }&#10;&#10;    private static List&lt;Character&gt; createUnits(int[] distribution) {&#10;        List&lt;Character&gt; units = new ArrayList&lt;&gt;();&#10;        &#10;        // Create units in order: Commander, Medic, Tank, Sniper, Infantry&#10;        for (int i = 0; i &lt; distribution[0]; i++) {&#10;            units.add(new Commander());&#10;        }&#10;        for (int i = 0; i &lt; distribution[1]; i++) {&#10;            units.add(new Medic());&#10;        }&#10;        for (int i = 0; i &lt; distribution[2]; i++) {&#10;            units.add(new Tank());&#10;        }&#10;        for (int i = 0; i &lt; distribution[3]; i++) {&#10;            units.add(new Sniper());&#10;        }&#10;        for (int i = 0; i &lt; distribution[4]; i++) {&#10;            units.add(new Infantry());&#10;        }&#10;&#10;        return units;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/cli/DisplayMode.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/cli/DisplayMode.java" />
              <option name="updatedContent" value="package university.jala.legion.cli;&#10;&#10;/**&#10; * Enum representing the display modes for the battlefield.&#10; */&#10;public enum DisplayMode {&#10;    CHARACTER('c'),&#10;    NUMERIC('n');&#10;&#10;    private final char code;&#10;&#10;    DisplayMode(char code) {&#10;        this.code = code;&#10;    }&#10;&#10;    public char getCode() {&#10;        return code;&#10;    }&#10;&#10;    public static DisplayMode fromCode(char code) {&#10;        for (DisplayMode mode : values()) {&#10;            if (mode.code == Character.toLowerCase(code)) {&#10;                return mode;&#10;            }&#10;        }&#10;        throw new IllegalArgumentException(&quot;Invalid display mode code: &quot; + code);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/cli/Parameters.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/cli/Parameters.java" />
              <option name="originalContent" value="package university.jala.legion.cli;&#10;&#10;import java.util.Arrays;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;/**&#10; * Handles command-line parameters for the March of the Legion simulator.&#10; */&#10;public class Parameters {&#10;    private final Map&lt;String, String&gt; parameters;&#10;&#10;    // Default values&#10;    private static final String DEFAULT_BATTLEFIELD_SIZE = &quot;10&quot;;&#10;    private static final String DEFAULT_ORIENTATION = &quot;n&quot;;&#10;    private static final String DEFAULT_TYPE = &quot;c&quot;;&#10;&#10;    /**&#10;     * Creates a Parameters instance from command-line arguments.&#10;     * @param args Command-line arguments in format key=value&#10;     */&#10;    public Parameters(String[] args) {&#10;        parameters = new HashMap&lt;&gt;();&#10;        parseArgs(args);&#10;        validateRequiredParameters();&#10;    }&#10;&#10;    private void parseArgs(String[] args) {&#10;        Arrays.stream(args)&#10;            .filter(arg -&gt; arg.contains(&quot;=&quot;))&#10;            .forEach(arg -&gt; {&#10;                String[] parts = arg.split(&quot;=&quot;, 2);&#10;                parameters.put(parts[0].toLowerCase(), parts[1].toLowerCase());&#10;            });&#10;&#10;        // Set defaults if not provided&#10;        parameters.putIfAbsent(&quot;f&quot;, DEFAULT_BATTLEFIELD_SIZE);&#10;        parameters.putIfAbsent(&quot;o&quot;, DEFAULT_ORIENTATION);&#10;        parameters.putIfAbsent(&quot;t&quot;, DEFAULT_TYPE);&#10;    }&#10;&#10;    private void validateRequiredParameters() {&#10;        if (!parameters.containsKey(&quot;a&quot;)) {&#10;            throw new IllegalArgumentException(&quot;Sorting algorithm parameter 'a' is required&quot;);&#10;        }&#10;        if (!parameters.containsKey(&quot;u&quot;)) {&#10;            throw new IllegalArgumentException(&quot;Unit distribution parameter 'u' is required&quot;);&#10;        }&#10;        validateAlgorithm();&#10;        validateOrientation();&#10;        validateType();&#10;        validateBattlefieldSize();&#10;        validateUnitDistribution();&#10;    }&#10;&#10;    private void validateAlgorithm() {&#10;        String algorithm = parameters.get(&quot;a&quot;);&#10;        if (!algorithm.matches(&quot;[qimh]&quot;)) {&#10;            throw new IllegalArgumentException(&quot;Invalid sorting algorithm code. Valid codes are: q (Quick), i (Insertion), m (Merge), h (Heap)&quot;);&#10;        }&#10;    }&#10;&#10;    private void validateOrientation() {&#10;        String orientation = parameters.get(&quot;o&quot;);&#10;        if (!orientation.matches(&quot;[nsew]&quot;)) {&#10;            throw new IllegalArgumentException(&quot;Invalid orientation code: &quot; + orientation);&#10;        }&#10;    }&#10;&#10;    private void validateType() {&#10;        String type = parameters.get(&quot;t&quot;);&#10;        if (!type.matches(&quot;[cn]&quot;)) {&#10;            throw new IllegalArgumentException(&quot;Invalid display type code: &quot; + type);&#10;        }&#10;    }&#10;&#10;    private void validateBattlefieldSize() {&#10;        try {&#10;            int size = Integer.parseInt(parameters.get(&quot;f&quot;));&#10;            if (size &lt; 5 || size &gt; 1000) {&#10;                throw new IllegalArgumentException(&quot;Battlefield size must be between 5 and 1000&quot;);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            throw new IllegalArgumentException(&quot;Invalid battlefield size format&quot;);&#10;        }&#10;    }&#10;&#10;    private void validateUnitDistribution() {&#10;        String distribution = parameters.get(&quot;u&quot;);&#10;        String[] units = distribution.split(&quot;,&quot;);&#10;        if (units.length != 5) {&#10;            throw new IllegalArgumentException(&quot;Unit distribution must specify 5 unit types&quot;);&#10;        }&#10;&#10;        int totalUnits = 0;&#10;        try {&#10;            for (String unit : units) {&#10;                int count = Integer.parseInt(unit);&#10;                if (count &lt; 0) {&#10;                    throw new IllegalArgumentException(&quot;Unit counts cannot be negative&quot;);&#10;                }&#10;                totalUnits += count;&#10;            }&#10;&#10;            int battlefieldSize = Integer.parseInt(parameters.get(&quot;f&quot;));&#10;            if (totalUnits &gt; battlefieldSize * battlefieldSize) {&#10;                throw new IllegalArgumentException(&quot;Total units exceed battlefield capacity&quot;);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            throw new IllegalArgumentException(&quot;Invalid unit count format&quot;);&#10;        }&#10;    }&#10;&#10;    public String getAlgorithm() {&#10;        return parameters.get(&quot;a&quot;);&#10;    }&#10;&#10;    public String getOrientation() {&#10;        return parameters.get(&quot;o&quot;);&#10;    }&#10;&#10;    public String getType() {&#10;        return parameters.get(&quot;t&quot;);&#10;    }&#10;&#10;    public int getBattlefieldSize() {&#10;        return Integer.parseInt(parameters.get(&quot;f&quot;));&#10;    }&#10;&#10;    public int[] getUnitDistribution() {&#10;        return Arrays.stream(parameters.get(&quot;u&quot;).split(&quot;,&quot;))&#10;            .mapToInt(Integer::parseInt)&#10;            .toArray();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package university.jala.legion.cli;&#13;&#10;&#13;&#10;import java.util.Arrays;&#13;&#10;import java.util.HashMap;&#13;&#10;import java.util.Map;&#13;&#10;&#13;&#10;/**&#13;&#10; * Handles command-line parameters for the March of the Legion simulator.&#13;&#10; */&#13;&#10;public class Parameters {&#13;&#10;    private final Map&lt;String, String&gt; parameters;&#13;&#10;&#13;&#10;    // Default values&#13;&#10;    private static final String DEFAULT_BATTLEFIELD_SIZE = &quot;10&quot;;&#13;&#10;    private static final String DEFAULT_ORIENTATION = &quot;n&quot;;&#13;&#10;    private static final String DEFAULT_TYPE = &quot;c&quot;;&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Creates a Parameters instance from command-line arguments.&#13;&#10;     * @param args Command-line arguments in format key=value&#13;&#10;     */&#13;&#10;    public Parameters(String[] args) {&#13;&#10;        parameters = new HashMap&lt;&gt;();&#13;&#10;        parseArgs(args);&#13;&#10;        validateRequiredParameters();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void parseArgs(String[] args) {&#13;&#10;        Arrays.stream(args)&#13;&#10;            .filter(arg -&gt; arg.contains(&quot;=&quot;))&#13;&#10;            .forEach(arg -&gt; {&#13;&#10;                String[] parts = arg.split(&quot;=&quot;, 2);&#13;&#10;                parameters.put(parts[0].toLowerCase(), parts[1].toLowerCase());&#13;&#10;            });&#13;&#10;&#13;&#10;        // Set defaults if not provided&#13;&#10;        parameters.putIfAbsent(&quot;f&quot;, DEFAULT_BATTLEFIELD_SIZE);&#13;&#10;        parameters.putIfAbsent(&quot;o&quot;, DEFAULT_ORIENTATION);&#13;&#10;        parameters.putIfAbsent(&quot;t&quot;, DEFAULT_TYPE);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void validateRequiredParameters() {&#13;&#10;        if (!parameters.containsKey(&quot;a&quot;)) {&#13;&#10;            throw new IllegalArgumentException(&quot;Sorting algorithm parameter 'a' is required&quot;);&#13;&#10;        }&#13;&#10;        if (!parameters.containsKey(&quot;u&quot;)) {&#13;&#10;            throw new IllegalArgumentException(&quot;Unit distribution parameter 'u' is required&quot;);&#13;&#10;        }&#13;&#10;        validateAlgorithm();&#13;&#10;        validateOrientation();&#13;&#10;        validateType();&#13;&#10;        validateBattlefieldSize();&#13;&#10;        validateUnitDistribution();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void validateAlgorithm() {&#13;&#10;        String algorithm = parameters.get(&quot;a&quot;);&#13;&#10;        if (!algorithm.matches(&quot;[qbsm]&quot;)) {&#13;&#10;            throw new IllegalArgumentException(&quot;Invalid sorting algorithm code. Valid codes are: q (Quick), b (Bubble), s (Selection), m (Merge)&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void validateOrientation() {&#13;&#10;        String orientation = parameters.get(&quot;o&quot;);&#13;&#10;        if (!orientation.matches(&quot;[nsew]&quot;)) {&#13;&#10;            throw new IllegalArgumentException(&quot;Invalid orientation code: &quot; + orientation);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void validateType() {&#13;&#10;        String type = parameters.get(&quot;t&quot;);&#13;&#10;        if (!type.matches(&quot;[cn]&quot;)) {&#13;&#10;            throw new IllegalArgumentException(&quot;Invalid display type code: &quot; + type);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void validateBattlefieldSize() {&#13;&#10;        try {&#13;&#10;            int size = Integer.parseInt(parameters.get(&quot;f&quot;));&#13;&#10;            if (size &lt; 5 || size &gt; 1000) {&#13;&#10;                throw new IllegalArgumentException(&quot;Battlefield size must be between 5 and 1000&quot;);&#13;&#10;            }&#13;&#10;        } catch (NumberFormatException e) {&#13;&#10;            throw new IllegalArgumentException(&quot;Invalid battlefield size format&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void validateUnitDistribution() {&#13;&#10;        String distribution = parameters.get(&quot;u&quot;);&#13;&#10;        String[] units = distribution.split(&quot;,&quot;);&#13;&#10;        if (units.length != 5) {&#13;&#10;            throw new IllegalArgumentException(&quot;Unit distribution must specify 5 unit types&quot;);&#13;&#10;        }&#13;&#10;&#13;&#10;        int totalUnits = 0;&#13;&#10;        try {&#13;&#10;            for (String unit : units) {&#13;&#10;                int count = Integer.parseInt(unit);&#13;&#10;                if (count &lt; 0) {&#13;&#10;                    throw new IllegalArgumentException(&quot;Unit counts cannot be negative&quot;);&#13;&#10;                }&#13;&#10;                totalUnits += count;&#13;&#10;            }&#13;&#10;&#13;&#10;            int battlefieldSize = Integer.parseInt(parameters.get(&quot;f&quot;));&#13;&#10;            if (totalUnits &gt; battlefieldSize * battlefieldSize) {&#13;&#10;                throw new IllegalArgumentException(&quot;Total units exceed battlefield capacity&quot;);&#13;&#10;            }&#13;&#10;        } catch (NumberFormatException e) {&#13;&#10;            throw new IllegalArgumentException(&quot;Invalid unit count format&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getAlgorithm() {&#13;&#10;        return parameters.get(&quot;a&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getOrientation() {&#13;&#10;        return parameters.get(&quot;o&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getType() {&#13;&#10;        return parameters.get(&quot;t&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    public int getBattlefieldSize() {&#13;&#10;        return Integer.parseInt(parameters.get(&quot;f&quot;));&#13;&#10;    }&#13;&#10;&#13;&#10;    public int[] getUnitDistribution() {&#13;&#10;        return Arrays.stream(parameters.get(&quot;u&quot;).split(&quot;,&quot;))&#13;&#10;            .mapToInt(Integer::parseInt)&#13;&#10;            .toArray();&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/cli/SimulationConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/cli/SimulationConfig.java" />
              <option name="updatedContent" value="package university.jala.legion.cli;&#10;&#10;import university.jala.legion.core.Direction;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;/**&#10; * Configuration class to hold parsed command line arguments.&#10; */&#10;public class SimulationConfig {&#10;    private final char sortingAlgorithm;&#10;    private final DisplayMode displayMode;&#10;    private final Direction orientation;&#10;    private final int[] troopCounts;&#10;    private final int fieldSize;&#10;&#10;    private SimulationConfig(char sortingAlgorithm, DisplayMode displayMode, &#10;                           Direction orientation, int[] troopCounts, int fieldSize) {&#10;        this.sortingAlgorithm = sortingAlgorithm;&#10;        this.displayMode = displayMode;&#10;        this.orientation = orientation;&#10;        this.troopCounts = troopCounts;&#10;        this.fieldSize = fieldSize;&#10;    }&#10;&#10;    /**&#10;     * Parses command line arguments into a SimulationConfig object.&#10;     *&#10;     * @param args Command line arguments&#10;     * @return Parsed configuration&#10;     * @throws IllegalArgumentException if arguments are invalid&#10;     */&#10;    public static SimulationConfig parse(String[] args) {&#10;        Map&lt;String, String&gt; params = parseArgs(args);&#10;        validateRequiredParams(params);&#10;&#10;        char algorithm = params.get(&quot;a&quot;).charAt(0);&#10;        DisplayMode mode = DisplayMode.fromCode(params.get(&quot;t&quot;).charAt(0));&#10;        Direction orientation = Direction.fromCode(params.get(&quot;o&quot;).charAt(0));&#10;        int[] troops = parseTroopCounts(params.get(&quot;u&quot;));&#10;        int size = params.containsKey(&quot;f&quot;) ? Integer.parseInt(params.get(&quot;f&quot;)) : 10;&#10;&#10;        validateTroopCounts(troops, size);&#10;        validateFieldSize(size);&#10;&#10;        return new SimulationConfig(algorithm, mode, orientation, troops, size);&#10;    }&#10;&#10;    private static Map&lt;String, String&gt; parseArgs(String[] args) {&#10;        Map&lt;String, String&gt; params = new HashMap&lt;&gt;();&#10;        for (String arg : args) {&#10;            String[] parts = arg.split(&quot;=&quot;);&#10;            if (parts.length != 2) {&#10;                throw new IllegalArgumentException(&quot;Invalid argument format: &quot; + arg);&#10;            }&#10;            params.put(parts[0], parts[1]);&#10;        }&#10;        return params;&#10;    }&#10;&#10;    private static void validateRequiredParams(Map&lt;String, String&gt; params) {&#10;        String[] required = {&quot;a&quot;, &quot;t&quot;, &quot;o&quot;, &quot;u&quot;};&#10;        for (String param : required) {&#10;            if (!params.containsKey(param)) {&#10;                throw new IllegalArgumentException(&quot;Missing required parameter: &quot; + param);&#10;            }&#10;        }&#10;    }&#10;&#10;    private static int[] parseTroopCounts(String counts) {&#10;        String[] parts = counts.split(&quot;,&quot;);&#10;        if (parts.length != 5) {&#10;            throw new IllegalArgumentException(&#10;                &quot;Troop counts must specify exactly 5 values (commander,medic,tank,sniper,infantry)&quot;);&#10;        }&#10;&#10;        int[] result = new int[5];&#10;        for (int i = 0; i &lt; 5; i++) {&#10;            result[i] = Integer.parseInt(parts[i]);&#10;            if (result[i] &lt; 0) {&#10;                throw new IllegalArgumentException(&quot;Troop counts cannot be negative&quot;);&#10;            }&#10;        }&#10;        return result;&#10;    }&#10;&#10;    private static void validateTroopCounts(int[] counts, int size) {&#10;        int total = 0;&#10;        for (int count : counts) {&#10;            total += count;&#10;        }&#10;        if (total &gt; size * size) {&#10;            throw new IllegalArgumentException(&#10;                &quot;Total troop count exceeds battlefield capacity&quot;);&#10;        }&#10;    }&#10;&#10;    private static void validateFieldSize(int size) {&#10;        if (size &lt; 5 || size &gt; 1000) {&#10;            throw new IllegalArgumentException(&#10;                &quot;Field size must be between 5 and 1000&quot;);&#10;        }&#10;    }&#10;&#10;    // Getters&#10;    public char getSortingAlgorithm() {&#10;        return sortingAlgorithm;&#10;    }&#10;&#10;    public DisplayMode getDisplayMode() {&#10;        return displayMode;&#10;    }&#10;&#10;    public Direction getOrientation() {&#10;        return orientation;&#10;    }&#10;&#10;    public int[] getTroopCounts() {&#10;        return troopCounts.clone();&#10;    }&#10;&#10;    public int getFieldSize() {&#10;        return fieldSize;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/core/Battlefield.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/core/Battlefield.java" />
              <option name="updatedContent" value="package university.jala.legion.core;&#10;&#10;import university.jala.legion.cli.DisplayMode;&#10;import university.jala.legion.trooper.Troop;&#10;import java.util.*;&#10;&#10;/**&#10; * Represents the battlefield grid where troops are positioned.&#10; * Manages troop placement, movement, and display.&#10; */&#10;public class Battlefield {&#10;    private final int size;&#10;    private final Troop[][] grid;&#10;    private final List&lt;Troop&gt; troops;&#10;&#10;    /**&#10;     * Creates a new battlefield with the specified size.&#10;     *&#10;     * @param size The size of the battlefield (NxN)&#10;     * @throws IllegalArgumentException if size is less than 5 or greater than 1000&#10;     */&#10;    public Battlefield(int size) {&#10;        if (size &lt; 5 || size &gt; 1000) {&#10;            throw new IllegalArgumentException(&quot;Battlefield size must be between 5 and 1000&quot;);&#10;        }&#10;        this.size = size;&#10;        this.grid = new Troop[size][size];&#10;        this.troops = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    /**&#10;     * Places a troop at a specific position on the battlefield.&#10;     *&#10;     * @param troop The troop to place&#10;     * @param position The position to place the troop&#10;     * @throws IllegalArgumentException if the position is invalid or occupied&#10;     */&#10;    public void placeTroop(Troop troop, Position position) {&#10;        if (!position.isValid(size)) {&#10;            throw new IllegalArgumentException(&quot;Invalid position: &quot; + position);&#10;        }&#10;        if (grid[position.y()][position.x()] != null) {&#10;            throw new IllegalArgumentException(&quot;Position already occupied: &quot; + position);&#10;        }&#10;        grid[position.y()][position.x()] = troop;&#10;        troop.setPosition(position);&#10;        troops.add(troop);&#10;    }&#10;&#10;    /**&#10;     * Gets the list of all troops on the battlefield.&#10;     *&#10;     * @return Unmodifiable list of troops&#10;     */&#10;    public List&lt;Troop&gt; getTroops() {&#10;        return Collections.unmodifiableList(troops);&#10;    }&#10;&#10;    /**&#10;     * Generates a string representation of the battlefield.&#10;     *&#10;     * @param mode The display mode (CHARACTER or NUMERIC)&#10;     * @return String representation of the battlefield&#10;     */&#10;    public String display(DisplayMode mode) {&#10;        StringBuilder sb = new StringBuilder();&#10;        // Top border&#10;        sb.append(&quot;+&quot;).append(&quot;-&quot;.repeat(size * 2 + 1)).append(&quot;+\n&quot;);&#10;        &#10;        for (int y = 0; y &lt; size; y++) {&#10;            sb.append(&quot;| &quot;);&#10;            for (int x = 0; x &lt; size; x++) {&#10;                Troop troop = grid[y][x];&#10;                if (troop == null) {&#10;                    sb.append(&quot;* &quot;);&#10;                } else {&#10;                    sb.append(mode == DisplayMode.CHARACTER ? &#10;                        troop.getSymbol() : &#10;                        troop.getNumericValue()).append(&quot; &quot;);&#10;                }&#10;            }&#10;            sb.append(&quot;|\n&quot;);&#10;        }&#10;        &#10;        // Bottom border&#10;        sb.append(&quot;+&quot;).append(&quot;-&quot;.repeat(size * 2 + 1)).append(&quot;+\n&quot;);&#10;        return sb.toString();&#10;    }&#10;&#10;    /**&#10;     * Arranges troops according to the specified direction after sorting.&#10;     *&#10;     * @param direction The direction to arrange troops&#10;     */&#10;    public void arrangeTroops(Direction direction) {&#10;        Collections.sort(troops);&#10;        clearGrid();&#10;        &#10;        int currentRank = -1;&#10;        int position = 0;&#10;        &#10;        for (Troop troop : troops) {&#10;            if (troop.getRank() != currentRank) {&#10;                currentRank = troop.getRank();&#10;                position = 0;&#10;            }&#10;            &#10;            Position newPos = calculatePosition(direction, currentRank, position++);&#10;            grid[newPos.y()][newPos.x()] = troop;&#10;            troop.setPosition(newPos);&#10;        }&#10;    }&#10;&#10;    private void clearGrid() {&#10;        for (int y = 0; y &lt; size; y++) {&#10;            Arrays.fill(grid[y], null);&#10;        }&#10;    }&#10;&#10;    private Position calculatePosition(Direction direction, int rank, int position) {&#10;        return switch (direction) {&#10;            case NORTH -&gt; new Position(position % size, rank);&#10;            case SOUTH -&gt; new Position(position % size, size - 1 - rank);&#10;            case EAST -&gt; new Position(rank, position % size);&#10;            case WEST -&gt; new Position(size - 1 - rank, position % size);&#10;        };&#10;    }&#10;&#10;    public int getSize() {&#10;        return size;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/core/Direction.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/core/Direction.java" />
              <option name="updatedContent" value="package university.jala.legion.core;&#10;&#10;/**&#10; * Enum representing the possible orientations for troop arrangement.&#10; */&#10;public enum Direction {&#10;    NORTH('n'),&#10;    SOUTH('s'),&#10;    EAST('e'),&#10;    WEST('w');&#10;&#10;    private final char code;&#10;&#10;    Direction(char code) {&#10;        this.code = code;&#10;    }&#10;&#10;    public char getCode() {&#10;        return code;&#10;    }&#10;&#10;    public static Direction fromCode(char code) {&#10;        for (Direction direction : values()) {&#10;            if (direction.code == Character.toLowerCase(code)) {&#10;                return direction;&#10;            }&#10;        }&#10;        throw new IllegalArgumentException(&quot;Invalid direction code: &quot; + code);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/core/Position.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/core/Position.java" />
              <option name="updatedContent" value="package university.jala.legion.core;&#10;&#10;/**&#10; * Represents a position on the battlefield grid.&#10; * Immutable class to ensure thread safety and prevent accidental modifications.&#10; */&#10;public record Position(int x, int y) {&#10;    &#10;    /**&#10;     * Validates if the position is within the battlefield boundaries.&#10;     *&#10;     * @param size The size of the battlefield (NxN)&#10;     * @return true if the position is valid, false otherwise&#10;     */&#10;    public boolean isValid(int size) {&#10;        return x &gt;= 0 &amp;&amp; x &lt; size &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; size;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;(&quot; + x + &quot;,&quot; + y + &quot;)&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/model/Battlefield.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/model/Battlefield.java" />
              <option name="updatedContent" value="package university.jala.legion.model;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Random;&#10;&#10;/**&#10; * Represents the battlefield grid and manages unit placement.&#10; */&#10;public class Battlefield {&#10;    private final int size;&#10;    private final Character[][] grid;&#10;    private final List&lt;Character&gt; units;&#10;    private final Random random;&#10;&#10;    public Battlefield(int size) {&#10;        this.size = size;&#10;        this.grid = new Character[size][size];&#10;        this.units = new ArrayList&lt;&gt;();&#10;        this.random = new Random();&#10;    }&#10;&#10;    /**&#10;     * Places units randomly on the battlefield.&#10;     * @param units List of units to place&#10;     */&#10;    public void placeUnitsRandomly(List&lt;Character&gt; units) {&#10;        this.units.clear();&#10;        this.units.addAll(units);&#10;        &#10;        // Clear the grid&#10;        for (int i = 0; i &lt; size; i++) {&#10;            for (int j = 0; j &lt; size; j++) {&#10;                grid[i][j] = null;&#10;            }&#10;        }&#10;&#10;        // Place each unit randomly&#10;        for (Character unit : units) {&#10;            Position position;&#10;            do {&#10;                position = new Position(random.nextInt(size), random.nextInt(size));&#10;            } while (!isPositionEmpty(position));&#10;&#10;            placeUnit(unit, position);&#10;        }&#10;    }&#10;&#10;    private boolean isPositionEmpty(Position position) {&#10;        return grid[position.getRow()][position.getColumn()] == null;&#10;    }&#10;&#10;    private void placeUnit(Character unit, Position position) {&#10;        grid[position.getRow()][position.getColumn()] = unit;&#10;        unit.setPosition(position);&#10;    }&#10;&#10;    /**&#10;     * Renders the battlefield in ASCII format.&#10;     * @param useNumeric Whether to use numeric representation&#10;     * @return String representation of the battlefield&#10;     */&#10;    public String render(boolean useNumeric) {&#10;        StringBuilder sb = new StringBuilder();&#10;        &#10;        // Add top border&#10;        sb.append(&quot;+&quot;);&#10;        for (int i = 0; i &lt; size; i++) sb.append(&quot;--&quot;);&#10;        sb.append(&quot;+\n&quot;);&#10;&#10;        // Add grid content&#10;        for (int i = 0; i &lt; size; i++) {&#10;            sb.append(&quot;|&quot;);&#10;            for (int j = 0; j &lt; size; j++) {&#10;                Character unit = grid[i][j];&#10;                if (unit == null) {&#10;                    sb.append(&quot;* &quot;);&#10;                } else {&#10;                    if (useNumeric) {&#10;                        sb.append(unit.getNumericRange()).append(&quot; &quot;);&#10;                    } else {&#10;                        sb.append(unit.getSymbol()).append(&quot; &quot;);&#10;                    }&#10;                }&#10;            }&#10;            sb.append(&quot;|\n&quot;);&#10;        }&#10;&#10;        // Add bottom border&#10;        sb.append(&quot;+&quot;);&#10;        for (int i = 0; i &lt; size; i++) sb.append(&quot;--&quot;);&#10;        sb.append(&quot;+&quot;);&#10;&#10;        return sb.toString();&#10;    }&#10;&#10;    public List&lt;Character&gt; getUnits() {&#10;        return new ArrayList&lt;&gt;(units);&#10;    }&#10;&#10;    public void applyNewPositions(List&lt;Character&gt; sortedUnits, String orientation) {&#10;        // Clear the grid&#10;        for (int i = 0; i &lt; size; i++) {&#10;            for (int j = 0; j &lt; size; j++) {&#10;                grid[i][j] = null;&#10;            }&#10;        }&#10;&#10;        int unitIndex = 0;&#10;        switch (orientation.toLowerCase()) {&#10;            case &quot;n&quot;: // North - top to bottom&#10;                for (int j = 0; j &lt; size &amp;&amp; unitIndex &lt; sortedUnits.size(); j++) {&#10;                    for (int i = 0; i &lt; size &amp;&amp; unitIndex &lt; sortedUnits.size(); i++) {&#10;                        Position pos = new Position(i, j);&#10;                        placeUnit(sortedUnits.get(unitIndex++), pos);&#10;                    }&#10;                }&#10;                break;&#10;            case &quot;s&quot;: // South - bottom to top&#10;                for (int j = 0; j &lt; size &amp;&amp; unitIndex &lt; sortedUnits.size(); j++) {&#10;                    for (int i = size - 1; i &gt;= 0 &amp;&amp; unitIndex &lt; sortedUnits.size(); i--) {&#10;                        Position pos = new Position(i, j);&#10;                        placeUnit(sortedUnits.get(unitIndex++), pos);&#10;                    }&#10;                }&#10;                break;&#10;            case &quot;e&quot;: // East - left to right&#10;                for (int i = 0; i &lt; size &amp;&amp; unitIndex &lt; sortedUnits.size(); i++) {&#10;                    for (int j = 0; j &lt; size &amp;&amp; unitIndex &lt; sortedUnits.size(); j++) {&#10;                        Position pos = new Position(i, j);&#10;                        placeUnit(sortedUnits.get(unitIndex++), pos);&#10;                    }&#10;                }&#10;                break;&#10;            case &quot;w&quot;: // West - right to left&#10;                for (int i = 0; i &lt; size &amp;&amp; unitIndex &lt; sortedUnits.size(); i++) {&#10;                    for (int j = size - 1; j &gt;= 0 &amp;&amp; unitIndex &lt; sortedUnits.size(); j--) {&#10;                        Position pos = new Position(i, j);&#10;                        placeUnit(sortedUnits.get(unitIndex++), pos);&#10;                    }&#10;                }&#10;                break;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/model/Character.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/model/Character.java" />
              <option name="updatedContent" value="package university.jala.legion.model;&#10;&#10;/**&#10; * Base abstract class for all military units in the simulation.&#10; */&#10;public abstract class Character {&#10;    private final int rank;&#10;    private Position position;&#10;    private final char symbol;&#10;    private final int numericRange;&#10;&#10;    protected Character(int rank, char symbol, int numericRange) {&#10;        this.rank = rank;&#10;        this.symbol = symbol;&#10;        this.numericRange = numericRange;&#10;    }&#10;&#10;    public int getRank() {&#10;        return rank;&#10;    }&#10;&#10;    public Position getPosition() {&#10;        return position;&#10;    }&#10;&#10;    public void setPosition(Position position) {&#10;        this.position = position;&#10;    }&#10;&#10;    public char getSymbol() {&#10;        return symbol;&#10;    }&#10;&#10;    public int getNumericRange() {&#10;        return numericRange;&#10;    }&#10;&#10;    public abstract String getType();&#10;&#10;    @Override&#10;    public String toString() {&#10;        return String.valueOf(symbol);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/model/Position.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/model/Position.java" />
              <option name="updatedContent" value="package university.jala.legion.model;&#10;&#10;/**&#10; * Represents a position on the battlefield.&#10; */&#10;public class Position {&#10;    private final int row;&#10;    private final int column;&#10;&#10;    public Position(int row, int column) {&#10;        this.row = row;&#10;        this.column = column;&#10;    }&#10;&#10;    public int getRow() {&#10;        return row;&#10;    }&#10;&#10;    public int getColumn() {&#10;        return column;&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object obj) {&#10;        if (this == obj) return true;&#10;        if (obj == null || getClass() != obj.getClass()) return false;&#10;        Position position = (Position) obj;&#10;        return row == position.row &amp;&amp; column == position.column;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return 31 * row + column;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;(&quot; + row + &quot;,&quot; + column + &quot;)&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/model/units/Artillery.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/model/units/Artillery.java" />
              <option name="updatedContent" value="package university.jala.legion.model.units;&#10;&#10;import university.jala.legion.model.Character;&#10;import university.jala.legion.model.Position;&#10;&#10;public class Artillery extends Character {&#10;    private static final int BASE_HEALTH = 60;&#10;    private static final int BASE_ATTACK = 40;&#10;    private static final int BASE_DEFENSE = 2;&#10;    private int ammunition;&#10;    private boolean isDeployed;&#10;&#10;    public Artillery(String name, int rank) {&#10;        super(name, rank, BASE_HEALTH, BASE_ATTACK, BASE_DEFENSE);&#10;        this.ammunition = 15;&#10;        this.isDeployed = false;&#10;    }&#10;&#10;    @Override&#10;    public void move(Position newPosition) {&#10;        if (isDeployed) {&#10;            throw new IllegalStateException(&quot;Artillery must be undeployed to move&quot;);&#10;        }&#10;        &#10;        if (this.position.distanceTo(newPosition) &lt;= 1.0) {&#10;            this.position = newPosition;&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;Artillery can only move 1 square at a time&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void attack(Character target) {&#10;        if (!isAlive() || !target.isAlive() || !isDeployed || ammunition &lt;= 0) {&#10;            return;&#10;        }&#10;&#10;        double distance = position.distanceTo(target.getPosition());&#10;        if (distance &gt;= 3.0 &amp;&amp; distance &lt;= 6.0) {&#10;            // Artillery does area damage&#10;            target.takeDamage(this.attack);&#10;            ammunition--;&#10;        }&#10;    }&#10;&#10;    public void deploy() {&#10;        isDeployed = true;&#10;        this.defense += 3; // Increased defense when deployed&#10;    }&#10;&#10;    public void undeploy() {&#10;        isDeployed = false;&#10;        this.defense -= 3; // Return to normal defense&#10;    }&#10;&#10;    public void resupplyAmmunition(int amount) {&#10;        this.ammunition = Math.min(15, this.ammunition + amount);&#10;    }&#10;&#10;    public boolean isDeployed() {&#10;        return isDeployed;&#10;    }&#10;&#10;    public int getAmmunition() {&#10;        return ammunition;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/model/units/Commander.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/model/units/Commander.java" />
              <option name="updatedContent" value="package university.jala.legion.model.units;&#10;&#10;import university.jala.legion.model.Character;&#10;&#10;public class Commander extends Character {&#10;    private static final int RANK = 0;&#10;    private static final char SYMBOL = 'C';&#10;    private static final int NUMERIC_RANGE = 1;&#10;&#10;    public Commander() {&#10;        super(RANK, SYMBOL, NUMERIC_RANGE);&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return &quot;Commander&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/model/units/Engineer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/model/units/Engineer.java" />
              <option name="updatedContent" value="package university.jala.legion.model.units;&#10;&#10;import university.jala.legion.model.Character;&#10;import university.jala.legion.model.Position;&#10;&#10;public class Engineer extends Character {&#10;    private static final int BASE_HEALTH = 70;&#10;    private static final int BASE_ATTACK = 5;&#10;    private static final int BASE_DEFENSE = 3;&#10;    private int supplies;&#10;    private static final int REPAIR_AMOUNT = 30;&#10;&#10;    public Engineer(String name, int rank) {&#10;        super(name, rank, BASE_HEALTH, BASE_ATTACK, BASE_DEFENSE);&#10;        this.supplies = 100;&#10;    }&#10;&#10;    @Override&#10;    public void move(Position newPosition) {&#10;        if (this.position.distanceTo(newPosition) &lt;= 1.0) {&#10;            this.position = newPosition;&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;Engineer can only move 1 square at a time&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void attack(Character target) {&#10;        if (!isAlive() || !target.isAlive()) {&#10;            return;&#10;        }&#10;&#10;        // Engineers have minimal combat capabilities&#10;        if (position.distanceTo(target.getPosition()) &lt;= 1.0) {&#10;            target.takeDamage(this.attack);&#10;        }&#10;    }&#10;&#10;    public boolean repair(Character target) {&#10;        if (!isAlive() || !target.isAlive() || supplies &lt; 20) {&#10;            return false;&#10;        }&#10;&#10;        // Can only repair Tank units&#10;        if (!(target instanceof Tank)) {&#10;            return false;&#10;        }&#10;&#10;        double distance = position.distanceTo(target.getPosition());&#10;        if (distance &lt;= 1.0) {&#10;            target.takeDamage(-REPAIR_AMOUNT); // Negative damage = repair&#10;            supplies -= 20;&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public boolean refuelTank(Tank tank) {&#10;        if (!isAlive() || !tank.isAlive() || supplies &lt; 30) {&#10;            return false;&#10;        }&#10;&#10;        double distance = position.distanceTo(tank.getPosition());&#10;        if (distance &lt;= 1.0) {&#10;            tank.refuel(50);&#10;            supplies -= 30;&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public void resupply(int amount) {&#10;        this.supplies = Math.min(100, this.supplies + amount);&#10;    }&#10;&#10;    public int getSupplies() {&#10;        return supplies;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/model/units/Infantry.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/model/units/Infantry.java" />
              <option name="updatedContent" value="package university.jala.legion.model.units;&#10;&#10;import university.jala.legion.model.Character;&#10;&#10;public class Infantry extends Character {&#10;    private static final int RANK = 4;&#10;    private static final char SYMBOL = 'I';&#10;    private static final int NUMERIC_RANGE = 5;&#10;&#10;    public Infantry() {&#10;        super(RANK, SYMBOL, NUMERIC_RANGE);&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return &quot;Infantry&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/model/units/Medic.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/model/units/Medic.java" />
              <option name="updatedContent" value="package university.jala.legion.model.units;&#10;&#10;import university.jala.legion.model.Character;&#10;&#10;public class Medic extends Character {&#10;    private static final int RANK = 1;&#10;    private static final char SYMBOL = 'M';&#10;    private static final int NUMERIC_RANGE = 2;&#10;&#10;    public Medic() {&#10;        super(RANK, SYMBOL, NUMERIC_RANGE);&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return &quot;Medic&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/model/units/Sniper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/model/units/Sniper.java" />
              <option name="updatedContent" value="package university.jala.legion.model.units;&#10;&#10;import university.jala.legion.model.Character;&#10;&#10;public class Sniper extends Character {&#10;    private static final int RANK = 3;&#10;    private static final char SYMBOL = 'S';&#10;    private static final int NUMERIC_RANGE = 4;&#10;&#10;    public Sniper() {&#10;        super(RANK, SYMBOL, NUMERIC_RANGE);&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return &quot;Sniper&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/model/units/Tank.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/model/units/Tank.java" />
              <option name="updatedContent" value="package university.jala.legion.model.units;&#10;&#10;import university.jala.legion.model.Character;&#10;&#10;public class Tank extends Character {&#10;    private static final int RANK = 2;&#10;    private static final char SYMBOL = 'T';&#10;    private static final int NUMERIC_RANGE = 3;&#10;&#10;    public Tank() {&#10;        super(RANK, SYMBOL, NUMERIC_RANGE);&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return &quot;Tank&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/BubbleSort.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/BubbleSort.java" />
              <option name="updatedContent" value="package university.jala.legion.sorting;&#10;&#10;import university.jala.legion.model.Character;&#10;import java.util.List;&#10;&#10;public class BubbleSort implements SortingStrategy {&#10;    @Override&#10;    public void sort(List&lt;Character&gt; units) {&#10;        int n = units.size();&#10;        boolean swapped;&#10;        &#10;        for (int i = 0; i &lt; n - 1; i++) {&#10;            swapped = false;&#10;            for (int j = 0; j &lt; n - i - 1; j++) {&#10;                if (units.get(j).getRank() &gt; units.get(j + 1).getRank()) {&#10;                    Character temp = units.get(j);&#10;                    units.set(j, units.get(j + 1));&#10;                    units.set(j + 1, temp);&#10;                    swapped = true;&#10;                }&#10;            }&#10;            &#10;            if (!swapped) {&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getName() {&#10;        return &quot;Bubble Sort&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/CountingSort.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/CountingSort.java" />
              <option name="updatedContent" value="package university.jala.legion.sorting;&#10;&#10;import university.jala.legion.model.Character;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class CountingSort implements SortingStrategy {&#10;    private static final int MAX_RANK = 4;  // Maximum rank in our troop system&#10;&#10;    @Override&#10;    public void sort(List&lt;Character&gt; units) {&#10;        int[] count = new int[MAX_RANK + 1];&#10;        List&lt;Character&gt; output = new ArrayList&lt;&gt;(units);&#10;&#10;        // Store count of each rank&#10;        for (Character unit : units) {&#10;            count[unit.getRank()]++;&#10;        }&#10;&#10;        // Calculate cumulative count&#10;        for (int i = 1; i &lt;= MAX_RANK; i++) {&#10;            count[i] += count[i - 1];&#10;        }&#10;&#10;        // Build the output array&#10;        for (int i = units.size() - 1; i &gt;= 0; i--) {&#10;            Character unit = units.get(i);&#10;            output.set(count[unit.getRank()] - 1, unit);&#10;            count[unit.getRank()]--;&#10;        }&#10;&#10;        // Copy the output array to original list&#10;        for (int i = 0; i &lt; units.size(); i++) {&#10;            units.set(i, output.get(i));&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getName() {&#10;        return &quot;Counting Sort&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/HeapSort.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/HeapSort.java" />
              <option name="updatedContent" value="package university.jala.legion.sorting;&#10;&#10;import university.jala.legion.model.Character;&#10;import java.util.List;&#10;&#10;public class HeapSort implements SortingStrategy {&#10;    @Override&#10;    public void sort(List&lt;Character&gt; units) {&#10;        int n = units.size();&#10;&#10;        // Build heap&#10;        for (int i = n / 2 - 1; i &gt;= 0; i--)&#10;            heapify(units, n, i);&#10;&#10;        // Extract elements from heap one by one&#10;        for (int i = n - 1; i &gt; 0; i--) {&#10;            // Move current root to end&#10;            Character temp = units.get(0);&#10;            units.set(0, units.get(i));&#10;            units.set(i, temp);&#10;&#10;            // Call heapify on the reduced heap&#10;            heapify(units, i, 0);&#10;        }&#10;    }&#10;&#10;    private void heapify(List&lt;Character&gt; units, int n, int i) {&#10;        int largest = i;&#10;        int left = 2 * i + 1;&#10;        int right = 2 * i + 2;&#10;&#10;        if (left &lt; n &amp;&amp; units.get(left).getRank() &gt; units.get(largest).getRank())&#10;            largest = left;&#10;&#10;        if (right &lt; n &amp;&amp; units.get(right).getRank() &gt; units.get(largest).getRank())&#10;            largest = right;&#10;&#10;        if (largest != i) {&#10;            Character swap = units.get(i);&#10;            units.set(i, units.get(largest));&#10;            units.set(largest, swap);&#10;&#10;            heapify(units, n, largest);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getName() {&#10;        return &quot;Heap Sort&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/InsertionSort.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/InsertionSort.java" />
              <option name="updatedContent" value="package university.jala.legion.sorting;&#10;&#10;import university.jala.legion.model.Character;&#10;import java.util.List;&#10;&#10;public class InsertionSort implements SortingStrategy {&#10;    @Override&#10;    public void sort(List&lt;Character&gt; units) {&#10;        int n = units.size();&#10;        for (int i = 1; i &lt; n; i++) {&#10;            Character key = units.get(i);&#10;            int j = i - 1;&#10;            &#10;            while (j &gt;= 0 &amp;&amp; units.get(j).getRank() &gt; key.getRank()) {&#10;                units.set(j + 1, units.get(j));&#10;                j--;&#10;            }&#10;            units.set(j + 1, key);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getName() {&#10;        return &quot;Insertion Sort&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/MergeSort.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/MergeSort.java" />
              <option name="updatedContent" value="package university.jala.legion.sorting;&#10;&#10;import university.jala.legion.model.Character;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class MergeSort implements SortingStrategy {&#10;    @Override&#10;    public void sort(List&lt;Character&gt; units) {&#10;        if (units.size() &lt;= 1) {&#10;            return;&#10;        }&#10;        &#10;        int mid = units.size() / 2;&#10;        List&lt;Character&gt; left = new ArrayList&lt;&gt;(units.subList(0, mid));&#10;        List&lt;Character&gt; right = new ArrayList&lt;&gt;(units.subList(mid, units.size()));&#10;        &#10;        sort(left);&#10;        sort(right);&#10;        merge(units, left, right);&#10;    }&#10;    &#10;    private void merge(List&lt;Character&gt; units, List&lt;Character&gt; left, List&lt;Character&gt; right) {&#10;        int i = 0, j = 0, k = 0;&#10;        &#10;        while (i &lt; left.size() &amp;&amp; j &lt; right.size()) {&#10;            if (left.get(i).getRank() &lt;= right.get(j).getRank()) {&#10;                units.set(k++, left.get(i++));&#10;            } else {&#10;                units.set(k++, right.get(j++));&#10;            }&#10;        }&#10;        &#10;        while (i &lt; left.size()) {&#10;            units.set(k++, left.get(i++));&#10;        }&#10;        &#10;        while (j &lt; right.size()) {&#10;            units.set(k++, right.get(j++));&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getName() {&#10;        return &quot;Merge Sort&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/QuickSort.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/QuickSort.java" />
              <option name="updatedContent" value="package university.jala.legion.sorting;&#10;&#10;import university.jala.legion.model.Character;&#10;import java.util.List;&#10;&#10;public class QuickSort implements SortingStrategy {&#10;    @Override&#10;    public void sort(List&lt;Character&gt; units) {&#10;        quickSort(units, 0, units.size() - 1);&#10;    }&#10;    &#10;    private void quickSort(List&lt;Character&gt; units, int low, int high) {&#10;        if (low &lt; high) {&#10;            int pi = partition(units, low, high);&#10;            quickSort(units, low, pi - 1);&#10;            quickSort(units, pi + 1, high);&#10;        }&#10;    }&#10;    &#10;    private int partition(List&lt;Character&gt; units, int low, int high) {&#10;        Character pivot = units.get(high);&#10;        int i = (low - 1);&#10;        &#10;        for (int j = low; j &lt; high; j++) {&#10;            if (units.get(j).getRank() &lt;= pivot.getRank()) {&#10;                i++;&#10;                Character temp = units.get(i);&#10;                units.set(i, units.get(j));&#10;                units.set(j, temp);&#10;            }&#10;        }&#10;        &#10;        Character temp = units.get(i + 1);&#10;        units.set(i + 1, units.get(high));&#10;        units.set(high, temp);&#10;        &#10;        return i + 1;&#10;    }&#10;&#10;    @Override&#10;    public String getName() {&#10;        return &quot;Quick Sort&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/RadixSort.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/RadixSort.java" />
              <option name="updatedContent" value="package university.jala.legion.sorting;&#10;&#10;import university.jala.legion.model.Character;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class RadixSort implements SortingStrategy {&#10;    @Override&#10;    public void sort(List&lt;Character&gt; units) {&#10;        // Since we only have ranks 0-4, we can use a simpler version of radix sort&#10;        // that only needs one pass (similar to counting sort)&#10;        countingSortByRank(units);&#10;    }&#10;&#10;    private void countingSortByRank(List&lt;Character&gt; units) {&#10;        int n = units.size();&#10;        List&lt;Character&gt; output = new ArrayList&lt;&gt;(n);&#10;        for (int i = 0; i &lt; n; i++) output.add(null);&#10;        &#10;        int[] count = new int[5]; // We have ranks 0-4&#10;&#10;        // Store count of each rank&#10;        for (Character unit : units) {&#10;            count[unit.getRank()]++;&#10;        }&#10;&#10;        // Change count[i] so that count[i] now contains actual&#10;        // position of this rank in output[]&#10;        for (int i = 1; i &lt; 5; i++) {&#10;            count[i] += count[i - 1];&#10;        }&#10;&#10;        // Build the output array&#10;        for (int i = n - 1; i &gt;= 0; i--) {&#10;            Character unit = units.get(i);&#10;            output.set(count[unit.getRank()] - 1, unit);&#10;            count[unit.getRank()]--;&#10;        }&#10;&#10;        // Copy the output array to original list&#10;        for (int i = 0; i &lt; n; i++) {&#10;            units.set(i, output.get(i));&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getName() {&#10;        return &quot;Radix Sort&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/SelectionSort.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/SelectionSort.java" />
              <option name="updatedContent" value="package university.jala.legion.sorting;&#10;&#10;import university.jala.legion.model.Character;&#10;import java.util.List;&#10;&#10;public class SelectionSort implements SortingStrategy {&#10;    @Override&#10;    public void sort(List&lt;Character&gt; units) {&#10;        int n = units.size();&#10;        &#10;        for (int i = 0; i &lt; n - 1; i++) {&#10;            int minIdx = i;&#10;            for (int j = i + 1; j &lt; n; j++) {&#10;                if (units.get(j).getRank() &lt; units.get(minIdx).getRank()) {&#10;                    minIdx = j;&#10;                }&#10;            }&#10;            &#10;            if (minIdx != i) {&#10;                Character temp = units.get(i);&#10;                units.set(i, units.get(minIdx));&#10;                units.set(minIdx, temp);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getName() {&#10;        return &quot;Selection Sort&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/SortingStrategy.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/SortingStrategy.java" />
              <option name="updatedContent" value="package university.jala.legion.sorting;&#10;&#10;import university.jala.legion.model.Character;&#10;import java.util.List;&#10;&#10;/**&#10; * Interface for sorting strategies to arrange military units.&#10; */&#10;public interface SortingStrategy {&#10;    /**&#10;     * Sorts the given list of units by rank.&#10;     * @param units The list of units to sort&#10;     */&#10;    void sort(List&lt;Character&gt; units);&#10;    &#10;    /**&#10;     * Gets the name of the sorting algorithm.&#10;     * @return The algorithm name&#10;     */&#10;    String getName();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/SortingStrategyFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/sorting/SortingStrategyFactory.java" />
              <option name="originalContent" value="package university.jala.legion.sorting;&#10;&#10;/**&#10; * Factory class for creating sorting strategy instances.&#10; */&#10;public class SortingStrategyFactory {&#10;    public static SortingStrategy createStrategy(String code) {&#10;        return switch (code.toLowerCase()) {&#10;            case &quot;b&quot; -&gt; new BubbleSort();&#10;            case &quot;i&quot; -&gt; new InsertionSort();&#10;            case &quot;m&quot; -&gt; new MergeSort();&#10;            case &quot;q&quot; -&gt; new QuickSort();&#10;            case &quot;h&quot; -&gt; new HeapSort();&#10;            case &quot;c&quot; -&gt; new CountingSort();&#10;            case &quot;r&quot; -&gt; new RadixSort();&#10;            default -&gt; throw new IllegalArgumentException(&quot;Invalid sorting algorithm code: &quot; + code);&#10;        };&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package university.jala.legion.sorting;&#13;&#10;&#13;&#10;/**&#13;&#10; * Factory class for creating sorting strategy instances.&#13;&#10; */&#13;&#10;public class SortingStrategyFactory {&#13;&#10;    public static SortingStrategy createStrategy(String code) {&#13;&#10;        return switch (code.toLowerCase()) {&#13;&#10;            case &quot;q&quot; -&gt; new QuickSort();  // Quick Sort&#13;&#10;            case &quot;b&quot; -&gt; new BubbleSort(); // Bubble Sort&#13;&#10;            case &quot;s&quot; -&gt; new SelectionSort(); // Selection Sort&#13;&#10;            case &quot;m&quot; -&gt; new MergeSort();  // Merge Sort&#13;&#10;            default -&gt; throw new IllegalArgumentException(&quot;Invalid sorting algorithm code. Valid codes are: q (Quick), b (Bubble), s (Selection), m (Merge)&quot;);&#13;&#10;        };&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/trooper/Commander.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/trooper/Commander.java" />
              <option name="updatedContent" value="package university.jala.legion.trooper;&#10;&#10;/**&#10; * Commander class representing the highest-ranking troop type.&#10; * Commanders have strategic command abilities.&#10; */&#10;public class Commander extends Troop {&#10;    public Commander() {&#10;        super(TroopType.COMMANDER);&#10;    }&#10;&#10;    @Override&#10;    public void specialAbility() {&#10;        // Commanders can coordinate other troops and provide leadership bonuses&#10;        // Implementation will be added when combat mechanics are implemented&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/trooper/Infantry.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/trooper/Infantry.java" />
              <option name="updatedContent" value="package university.jala.legion.trooper;&#10;&#10;/**&#10; * Infantry class representing basic ground troops.&#10; * Infantry units are the backbone of the military force.&#10; */&#10;public class Infantry extends Troop {&#10;    public Infantry() {&#10;        super(TroopType.INFANTRY);&#10;    }&#10;&#10;    @Override&#10;    public void specialAbility() {&#10;        // Infantry can perform group formations and basic combat maneuvers&#10;        // Implementation will be added when combat mechanics are implemented&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/trooper/Medic.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/trooper/Medic.java" />
              <option name="updatedContent" value="package university.jala.legion.trooper;&#10;&#10;/**&#10; * Medic class representing medical support units.&#10; * Medics have healing abilities.&#10; */&#10;public class Medic extends Troop {&#10;    public Medic() {&#10;        super(TroopType.MEDIC);&#10;    }&#10;&#10;    @Override&#10;    public void specialAbility() {&#10;        // Medics can heal other troops&#10;        // Implementation will be added when healing mechanics are implemented&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/trooper/Sniper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/trooper/Sniper.java" />
              <option name="updatedContent" value="package university.jala.legion.trooper;&#10;&#10;/**&#10; * Sniper class representing long-range combat units.&#10; * Snipers have precision attack capabilities.&#10; */&#10;public class Sniper extends Troop {&#10;    public Sniper() {&#10;        super(TroopType.SNIPER);&#10;    }&#10;&#10;    @Override&#10;    public void specialAbility() {&#10;        // Snipers can perform long-range precision attacks&#10;        // Implementation will be added when combat mechanics are implemented&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/trooper/Tank.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/trooper/Tank.java" />
              <option name="updatedContent" value="package university.jala.legion.trooper;&#10;&#10;/**&#10; * Tank class representing heavily armored combat units.&#10; * Tanks have high defense and offensive capabilities.&#10; */&#10;public class Tank extends Troop {&#10;    public Tank() {&#10;        super(TroopType.TANK);&#10;    }&#10;&#10;    @Override&#10;    public void specialAbility() {&#10;        // Tanks can absorb damage and provide cover&#10;        // Implementation will be added when combat mechanics are implemented&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/trooper/Troop.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/trooper/Troop.java" />
              <option name="updatedContent" value="package university.jala.legion.trooper;&#10;&#10;import university.jala.legion.core.Position;&#10;&#10;/**&#10; * Abstract base class for all military units in the simulation.&#10; * Implements common troop behavior and properties.&#10; */&#10;public abstract class Troop implements Comparable&lt;Troop&gt; {&#10;    private Position position;&#10;    private final TroopType type;&#10;&#10;    protected Troop(TroopType type) {&#10;        this.type = type;&#10;    }&#10;&#10;    public Position getPosition() {&#10;        return position;&#10;    }&#10;&#10;    public void setPosition(Position position) {&#10;        this.position = position;&#10;    }&#10;&#10;    public TroopType getType() {&#10;        return type;&#10;    }&#10;&#10;    public int getRank() {&#10;        return type.getRank();&#10;    }&#10;&#10;    public char getSymbol() {&#10;        return type.getSymbol();&#10;    }&#10;&#10;    public int getNumericValue() {&#10;        return type.getNumericValue();&#10;    }&#10;&#10;    @Override&#10;    public int compareTo(Troop other) {&#10;        return Integer.compare(this.getRank(), other.getRank());&#10;    }&#10;&#10;    /**&#10;     * Abstract method that defines the troop's special ability.&#10;     * Each concrete troop type must implement this method.&#10;     */&#10;    public abstract void specialAbility();&#10;&#10;    @Override&#10;    public String toString() {&#10;        return String.format(&quot;%s at %s&quot;, type, position);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/university/jala/legion/trooper/TroopType.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/university/jala/legion/trooper/TroopType.java" />
              <option name="updatedContent" value="package university.jala.legion.trooper;&#10;&#10;/**&#10; * Enumeration of troop types with their corresponding ranks and display symbols.&#10; */&#10;public enum TroopType {&#10;    COMMANDER(0, 'C', 0),&#10;    MEDIC(1, 'M', 1),&#10;    TANK(2, 'T', 2),&#10;    SNIPER(3, 'S', 3),&#10;    INFANTRY(4, 'I', 4);&#10;&#10;    private final int rank;&#10;    private final char symbol;&#10;    private final int numericValue;&#10;&#10;    TroopType(int rank, char symbol, int numericValue) {&#10;        this.rank = rank;&#10;        this.symbol = symbol;&#10;        this.numericValue = numericValue;&#10;    }&#10;&#10;    public int getRank() {&#10;        return rank;&#10;    }&#10;&#10;    public char getSymbol() {&#10;        return symbol;&#10;    }&#10;&#10;    public int getNumericValue() {&#10;        return numericValue;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/university/jala/legion/model/BattlefieldTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/university/jala/legion/model/BattlefieldTest.java" />
              <option name="originalContent" value="package university.jala.legion.model;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import university.jala.legion.model.units.*;&#10;import java.util.Comparator;&#10;import java.util.List;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class BattlefieldTest {&#10;    private Battlefield battlefield;&#10;    private Infantry infantry;&#10;    private Tank tank;&#10;    private Sniper sniper;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        battlefield = new Battlefield(10, 10);&#10;        infantry = new Infantry(&quot;Infantry1&quot;, 1);&#10;        tank = new Tank(&quot;Tank1&quot;, 3);&#10;        sniper = new Sniper(&quot;Sniper1&quot;, 2);&#10;    }&#10;&#10;    @Test&#10;    void testBattlefieldCreation() {&#10;        assertThrows(IllegalArgumentException.class, () -&gt; new Battlefield(0, 5));&#10;        assertThrows(IllegalArgumentException.class, () -&gt; new Battlefield(5, -1));&#10;&#10;        Battlefield validField = new Battlefield(5, 5);&#10;        assertEquals(5, validField.getWidth());&#10;        assertEquals(5, validField.getHeight());&#10;    }&#10;&#10;    @Test&#10;    void testAddUnit() {&#10;        assertTrue(battlefield.addUnit(infantry, new Position(0, 0)));&#10;        assertFalse(battlefield.addUnit(tank, new Position(0, 0))); // Same position&#10;        assertTrue(battlefield.addUnit(tank, new Position(1, 1))); // Different position&#10;    }&#10;&#10;    @Test&#10;    void testMoveUnit() {&#10;        battlefield.addUnit(infantry, new Position(0, 0));&#10;        assertTrue(battlefield.moveUnit(infantry.getId(), new Position(1, 0)));&#10;        assertEquals(new Position(1, 0), infantry.getPosition());&#10;    }&#10;&#10;    @Test&#10;    void testGetUnitAt() {&#10;        battlefield.addUnit(infantry, new Position(0, 0));&#10;        assertEquals(infantry, battlefield.getUnitAt(new Position(0, 0)));&#10;        assertNull(battlefield.getUnitAt(new Position(1, 1)));&#10;    }&#10;&#10;    @Test&#10;    void testSortUnitsQuickSort() {&#10;        battlefield.addUnit(infantry, new Position(0, 0));&#10;        battlefield.addUnit(tank, new Position(1, 0));&#10;        battlefield.addUnit(sniper, new Position(2, 0));&#10;&#10;        Comparator&lt;Character&gt; rankComparator = Comparator.comparingInt(Character::getRank);&#10;        List&lt;Character&gt; sorted = battlefield.sortUnits(rankComparator, &quot;quicksort&quot;);&#10;&#10;        assertEquals(3, sorted.size());&#10;        assertEquals(infantry, sorted.get(0)); // Rank 1&#10;        assertEquals(sniper, sorted.get(1));   // Rank 2&#10;        assertEquals(tank, sorted.get(2));     // Rank 3&#10;    }&#10;&#10;    @Test&#10;    void testSortUnitsMergeSort() {&#10;        battlefield.addUnit(tank, new Position(0, 0));    // Rank 3&#10;        battlefield.addUnit(infantry, new Position(1, 0)); // Rank 1&#10;        battlefield.addUnit(sniper, new Position(2, 0));   // Rank 2&#10;&#10;        Comparator&lt;Character&gt; rankComparator = Comparator.comparingInt(Character::getRank);&#10;        List&lt;Character&gt; sorted = battlefield.sortUnits(rankComparator, &quot;mergesort&quot;);&#10;&#10;        assertEquals(infantry, sorted.get(0)); // Rank 1&#10;        assertEquals(sniper, sorted.get(1));   // Rank 2&#10;        assertEquals(tank, sorted.get(2));     // Rank 3&#10;    }&#10;&#10;    @Test&#10;    void testGetAllUnits() {&#10;        battlefield.addUnit(infantry, new Position(0, 0));&#10;        battlefield.addUnit(tank, new Position(1, 1));&#10;        List&lt;Character&gt; allUnits = battlefield.getAllUnits();&#10;        assertEquals(2, allUnits.size());&#10;        assertTrue(allUnits.contains(infantry));&#10;        assertTrue(allUnits.contains(tank));&#10;    }&#10;&#10;    @Test&#10;    void testIsValidPosition() {&#10;        assertTrue(battlefield.isValidPosition(new Position(0, 0)));&#10;        assertTrue(battlefield.isValidPosition(new Position(9, 9)));&#10;        assertFalse(battlefield.isValidPosition(new Position(-1, 0)));&#10;        assertFalse(battlefield.isValidPosition(new Position(0, 10)));&#10;        assertFalse(battlefield.isValidPosition(new Position(10, 10)));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package university.jala.legion.model;&#13;&#10;&#13;&#10;import org.junit.jupiter.api.BeforeEach;&#13;&#10;import org.junit.jupiter.api.Test;&#13;&#10;import university.jala.legion.model.units.*;&#13;&#10;import java.util.Comparator;&#13;&#10;import java.util.List;&#13;&#10;import static org.junit.jupiter.api.Assertions.*;&#13;&#10;&#13;&#10;class BattlefieldTest {&#13;&#10;    private Battlefield battlefield;&#13;&#10;    private Infantry infantry;&#13;&#10;    private Tank tank;&#13;&#10;    private Sniper sniper;&#13;&#10;&#13;&#10;    @BeforeEach&#13;&#10;    void setUp() {&#13;&#10;        battlefield = new Battlefield(10, 10);&#13;&#10;        infantry = new Infantry(&quot;Infantry1&quot;, 1);&#13;&#10;        tank = new Tank(&quot;Tank1&quot;, 3);&#13;&#10;        sniper = new Sniper(&quot;Sniper1&quot;, 2);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testBattlefieldCreation() {&#13;&#10;        assertThrows(IllegalArgumentException.class, () -&gt; new Battlefield(0, 5));&#13;&#10;        assertThrows(IllegalArgumentException.class, () -&gt; new Battlefield(5, -1));&#13;&#10;&#13;&#10;        Battlefield validField = new Battlefield(5, 5);&#13;&#10;        assertEquals(5, validField.getWidth());&#13;&#10;        assertEquals(5, validField.getHeight());&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testAddUnit() {&#13;&#10;        assertTrue(battlefield.addUnit(infantry, new Position(0, 0)));&#13;&#10;        assertFalse(battlefield.addUnit(tank, new Position(0, 0))); // Same position&#13;&#10;        assertTrue(battlefield.addUnit(tank, new Position(1, 1))); // Different position&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testMoveUnit() {&#13;&#10;        battlefield.addUnit(infantry, new Position(0, 0));&#13;&#10;        assertTrue(battlefield.moveUnit(infantry.getId(), new Position(1, 0)));&#13;&#10;        assertEquals(new Position(1, 0), infantry.getPosition());&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testGetUnitAt() {&#13;&#10;        battlefield.addUnit(infantry, new Position(0, 0));&#13;&#10;        assertEquals(infantry, battlefield.getUnitAt(new Position(0, 0)));&#13;&#10;        assertNull(battlefield.getUnitAt(new Position(1, 1)));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testSortUnitsQuickSort() {&#13;&#10;        battlefield.addUnit(infantry, new Position(0, 0));&#13;&#10;        battlefield.addUnit(tank, new Position(1, 0));&#13;&#10;        battlefield.addUnit(sniper, new Position(2, 0));&#13;&#10;&#13;&#10;        Comparator&lt;Character&gt; rankComparator = Comparator.comparingInt(Character::getRank);&#13;&#10;        List&lt;Character&gt; sorted = battlefield.sortUnits(rankComparator, &quot;quicksort&quot;);&#13;&#10;&#13;&#10;        assertEquals(3, sorted.size());&#13;&#10;        assertEquals(infantry, sorted.get(0)); // Rank 1&#13;&#10;        assertEquals(sniper, sorted.get(1));   // Rank 2&#13;&#10;        assertEquals(tank, sorted.get(2));     // Rank 3&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testSortUnitsMergeSort() {&#13;&#10;        battlefield.addUnit(tank, new Position(0, 0));    // Rank 3&#13;&#10;        battlefield.addUnit(infantry, new Position(1, 0)); // Rank 1&#13;&#10;        battlefield.addUnit(sniper, new Position(2, 0));   // Rank 2&#13;&#10;&#13;&#10;        Comparator&lt;Character&gt; rankComparator = Comparator.comparingInt(Character::getRank);&#13;&#10;        List&lt;Character&gt; sorted = battlefield.sortUnits(rankComparator, &quot;mergesort&quot;);&#13;&#10;&#13;&#10;        assertEquals(infantry, sorted.get(0)); // Rank 1&#13;&#10;        assertEquals(sniper, sorted.get(1));   // Rank 2&#13;&#10;        assertEquals(tank, sorted.get(2));     // Rank 3&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testGetAllUnits() {&#13;&#10;        battlefield.addUnit(infantry, new Position(0, 0));&#13;&#10;        battlefield.addUnit(tank, new Position(1, 1));&#13;&#10;        List&lt;Character&gt; allUnits = battlefield.getAllUnits();&#13;&#10;        assertEquals(2, allUnits.size());&#13;&#10;        assertTrue(allUnits.contains(infantry));&#13;&#10;        assertTrue(allUnits.contains(tank));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testIsValidPosition() {&#13;&#10;        assertTrue(battlefield.isValidPosition(new Position(0, 0)));&#13;&#10;        assertTrue(battlefield.isValidPosition(new Position(9, 9)));&#13;&#10;        assertFalse(battlefield.isValidPosition(new Position(-1, 0)));&#13;&#10;        assertFalse(battlefield.isValidPosition(new Position(0, 10)));&#13;&#10;        assertFalse(battlefield.isValidPosition(new Position(10, 10)));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testAllSortingAlgorithms() {&#13;&#10;        // Create units with different ranks&#13;&#10;        Infantry infantry1 = new Infantry(&quot;Infantry1&quot;, 1);&#13;&#10;        Sniper sniper1 = new Sniper(&quot;Sniper1&quot;, 3);&#13;&#10;        Tank tank1 = new Tank(&quot;Tank1&quot;, 2);&#13;&#10;        Medic medic1 = new Medic(&quot;Medic1&quot;, 4);&#13;&#10;&#13;&#10;        // Add units to battlefield&#13;&#10;        battlefield.addUnit(infantry1, new Position(0, 0));&#13;&#10;        battlefield.addUnit(sniper1, new Position(1, 0));&#13;&#10;        battlefield.addUnit(tank1, new Position(2, 0));&#13;&#10;        battlefield.addUnit(medic1, new Position(3, 0));&#13;&#10;&#13;&#10;        Comparator&lt;Character&gt; rankComparator = Comparator.comparingInt(Character::getRank);&#13;&#10;&#13;&#10;        // Test each sorting algorithm&#13;&#10;        testSortingAlgorithm(&quot;quicksort&quot;, rankComparator);&#13;&#10;        testSortingAlgorithm(&quot;mergesort&quot;, rankComparator);&#13;&#10;        testSortingAlgorithm(&quot;bubblesort&quot;, rankComparator);&#13;&#10;        testSortingAlgorithm(&quot;insertionsort&quot;, rankComparator);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void testSortingAlgorithm(String algorithm, Comparator&lt;Character&gt; comparator) {&#13;&#10;        List&lt;Character&gt; sorted = battlefield.sortUnits(comparator, algorithm);&#13;&#10;        &#13;&#10;        // Verify size&#13;&#10;        assertEquals(4, sorted.size(), &quot;Sorted list should contain all units&quot;);&#13;&#10;        &#13;&#10;        // Verify order&#13;&#10;        for (int i = 0; i &lt; sorted.size() - 1; i++) {&#13;&#10;            assertTrue(&#13;&#10;                comparator.compare(sorted.get(i), sorted.get(i + 1)) &lt;= 0,&#13;&#10;                String.format(&quot;%s failed: Elements at index %d and %d are not in order&quot;, &#13;&#10;                            algorithm, i, i + 1)&#13;&#10;            );&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testSortingWithDuplicateRanks() {&#13;&#10;        Infantry infantry1 = new Infantry(&quot;Infantry1&quot;, 2);&#13;&#10;        Infantry infantry2 = new Infantry(&quot;Infantry2&quot;, 2);&#13;&#10;        Tank tank1 = new Tank(&quot;Tank1&quot;, 1);&#13;&#10;&#13;&#10;        battlefield.addUnit(infantry1, new Position(0, 0));&#13;&#10;        battlefield.addUnit(infantry2, new Position(1, 0));&#13;&#10;        battlefield.addUnit(tank1, new Position(2, 0));&#13;&#10;&#13;&#10;        List&lt;Character&gt; sorted = battlefield.sortUnits(&#13;&#10;            Comparator.comparingInt(Character::getRank),&#13;&#10;            &quot;mergesort&quot;  // Using mergesort as it's stable&#13;&#10;        );&#13;&#10;&#13;&#10;        assertEquals(3, sorted.size());&#13;&#10;        assertEquals(tank1, sorted.get(0));  // Rank 1&#13;&#10;        assertTrue(sorted.get(1).getRank() == 2 &amp;&amp; sorted.get(2).getRank() == 2);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testSortingSmallList() {&#13;&#10;        // Should use insertion sort for small lists&#13;&#10;        Infantry infantry = new Infantry(&quot;Infantry&quot;, 2);&#13;&#10;        Tank tank = new Tank(&quot;Tank&quot;, 1);&#13;&#10;&#13;&#10;        battlefield.addUnit(infantry, new Position(0, 0));&#13;&#10;        battlefield.addUnit(tank, new Position(1, 0));&#13;&#10;&#13;&#10;        List&lt;Character&gt; sorted = battlefield.sortUnits(&#13;&#10;            Comparator.comparingInt(Character::getRank),&#13;&#10;            &quot;quicksort&quot;  // Should automatically use insertion sort&#13;&#10;        );&#13;&#10;&#13;&#10;        assertEquals(2, sorted.size());&#13;&#10;        assertEquals(tank, sorted.get(0));&#13;&#10;        assertEquals(infantry, sorted.get(1));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testSortingWithCustomComparator() {&#13;&#10;        Infantry infantry = new Infantry(&quot;Infantry&quot;, 1);&#13;&#10;        Tank tank = new Tank(&quot;Tank&quot;, 2);&#13;&#10;        Sniper sniper = new Sniper(&quot;Sniper&quot;, 3);&#13;&#10;&#13;&#10;        battlefield.addUnit(infantry, new Position(0, 0));&#13;&#10;        battlefield.addUnit(tank, new Position(1, 0));&#13;&#10;        battlefield.addUnit(sniper, new Position(2, 0));&#13;&#10;&#13;&#10;        // Sort by name&#13;&#10;        List&lt;Character&gt; sorted = battlefield.sortUnits(&#13;&#10;            Comparator.comparing(Character::getName),&#13;&#10;            &quot;bubblesort&quot;&#13;&#10;        );&#13;&#10;&#13;&#10;        assertEquals(3, sorted.size());&#13;&#10;        assertEquals(&quot;Infantry&quot;, sorted.get(0).getName());&#13;&#10;        assertEquals(&quot;Sniper&quot;, sorted.get(1).getName());&#13;&#10;        assertEquals(&quot;Tank&quot;, sorted.get(2).getName());&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/university/jala/legion/model/PositionTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/university/jala/legion/model/PositionTest.java" />
              <option name="updatedContent" value="package university.jala.legion.model;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class PositionTest {&#10;    &#10;    @Test&#10;    void testPositionCreation() {&#10;        Position position = new Position(5, 3);&#10;        assertEquals(5, position.getX());&#10;        assertEquals(3, position.getY());&#10;    }&#10;&#10;    @Test&#10;    void testDistanceCalculation() {&#10;        Position p1 = new Position(0, 0);&#10;        Position p2 = new Position(3, 4);&#10;        // Distance should be 5 (using Pythagorean theorem)&#10;        assertEquals(5.0, p1.distanceTo(p2));&#10;    }&#10;&#10;    @Test&#10;    void testEquality() {&#10;        Position p1 = new Position(2, 3);&#10;        Position p2 = new Position(2, 3);&#10;        Position p3 = new Position(3, 2);&#10;&#10;        assertEquals(p1, p2);&#10;        assertNotEquals(p1, p3);&#10;    }&#10;&#10;    @Test&#10;    void testHashCode() {&#10;        Position p1 = new Position(2, 3);&#10;        Position p2 = new Position(2, 3);&#10;        &#10;        assertEquals(p1.hashCode(), p2.hashCode());&#10;    }&#10;&#10;    @Test&#10;    void testToString() {&#10;        Position position = new Position(1, 2);&#10;        assertEquals(&quot;(1, 2)&quot;, position.toString());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/university/jala/legion/model/units/ArtilleryTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/university/jala/legion/model/units/ArtilleryTest.java" />
              <option name="updatedContent" value="package university.jala.legion.model.units;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import university.jala.legion.model.Position;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class ArtilleryTest {&#10;    private Artillery artillery;&#10;    &#10;    @BeforeEach&#10;    void setUp() {&#10;        artillery = new Artillery(&quot;TestArtillery&quot;, 3);&#10;    }&#10;    &#10;    @Test&#10;    void testArtilleryCreation() {&#10;        assertNotNull(artillery);&#10;        assertEquals(&quot;TestArtillery&quot;, artillery.getName());&#10;        assertEquals(3, artillery.getRank());&#10;        assertTrue(artillery.isAlive());&#10;        assertFalse(artillery.isDeployed());&#10;        assertEquals(15, artillery.getAmmunition());&#10;    }&#10;    &#10;    @Test&#10;    void testDeployment() {&#10;        assertFalse(artillery.isDeployed());&#10;        artillery.deploy();&#10;        assertTrue(artillery.isDeployed());&#10;    }&#10;    &#10;    @Test&#10;    void testCannotMoveWhileDeployed() {&#10;        artillery.deploy();&#10;        Position newPos = new Position(1, 0);&#10;        assertThrows(IllegalStateException.class, () -&gt; artillery.move(newPos));&#10;    }&#10;    &#10;    @Test&#10;    void testValidMovement() {&#10;        Position newPos = new Position(1, 0);&#10;        artillery.move(newPos);&#10;        assertEquals(newPos, artillery.getPosition());&#10;    }&#10;    &#10;    @Test&#10;    void testAttackRange() {&#10;        artillery.deploy();&#10;        Artillery target = new Artillery(&quot;Target&quot;, 1);&#10;        &#10;        // Test minimum range&#10;        target.setPosition(new Position(2, 0));  // Too close&#10;        int initialHealth = target.getHealth();&#10;        artillery.attack(target);&#10;        assertEquals(initialHealth, target.getHealth());&#10;        &#10;        // Test valid range&#10;        target.setPosition(new Position(4, 0));  // Valid range&#10;        artillery.attack(target);&#10;        assertTrue(target.getHealth() &lt; initialHealth);&#10;        &#10;        // Test maximum range&#10;        target = new Artillery(&quot;Target&quot;, 1);&#10;        target.setPosition(new Position(7, 0));  // Too far&#10;        initialHealth = target.getHealth();&#10;        artillery.attack(target);&#10;        assertEquals(initialHealth, target.getHealth());&#10;    }&#10;    &#10;    @Test&#10;    void testAmmunitionDepletion() {&#10;        artillery.deploy();&#10;        Artillery target = new Artillery(&quot;Target&quot;, 1);&#10;        target.setPosition(new Position(4, 0));&#10;        &#10;        int initialAmmo = artillery.getAmmunition();&#10;        artillery.attack(target);&#10;        assertTrue(artillery.getAmmunition() &lt; initialAmmo);&#10;    }&#10;    &#10;    @Test&#10;    void testResupplyAmmunition() {&#10;        artillery.deploy();&#10;        Artillery target = new Artillery(&quot;Target&quot;, 1);&#10;        target.setPosition(new Position(4, 0));&#10;        artillery.attack(target);&#10;        &#10;        int ammoBeforeResupply = artillery.getAmmunition();&#10;        artillery.resupplyAmmunition(5);&#10;        assertTrue(artillery.getAmmunition() &gt; ammoBeforeResupply);&#10;        assertTrue(artillery.getAmmunition() &lt;= 15);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/university/jala/legion/model/units/EngineerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/university/jala/legion/model/units/EngineerTest.java" />
              <option name="originalContent" value="package university.jala.legion.model.units;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import university.jala.legion.model.Position;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class EngineerTest {&#10;    private Engineer engineer;&#10;    private Tank tank;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        engineer = new Engineer(&quot;TestEngineer&quot;, 2);&#10;        tank = new Tank(&quot;TestTank&quot;, 3);&#10;    }&#10;&#10;    @Test&#10;    void testEngineerCreation() {&#10;        assertNotNull(engineer);&#10;        assertEquals(&quot;TestEngineer&quot;, engineer.getName());&#10;        assertEquals(2, engineer.getRank());&#10;        assertTrue(engineer.isAlive());&#10;        assertEquals(100, engineer.getSupplies());&#10;    }&#10;&#10;    @Test&#10;    void testRepairTank() {&#10;        tank.takeDamage(50);&#10;        tank.setPosition(new Position(1, 0));&#10;        int healthBeforeRepair = tank.getHealth();&#10;&#10;        assertTrue(engineer.repair(tank));&#10;        assertTrue(tank.getHealth() &gt; healthBeforeRepair);&#10;    }&#10;&#10;    @Test&#10;    void testCannotRepairNonTankUnits() {&#10;        Infantry infantry = new Infantry(&quot;TestInfantry&quot;, 1);&#10;        infantry.takeDamage(50);&#10;        infantry.setPosition(new Position(1, 0));&#10;&#10;        assertFalse(engineer.repair(infantry));&#10;    }&#10;&#10;    @Test&#10;    void testRefuelTank() {&#10;        tank.setPosition(new Position(1, 0));&#10;        // Use some fuel&#10;        tank.move(new Position(0, 0));&#10;        int fuelBeforeRefill = tank.getFuel();&#10;&#10;        assertTrue(engineer.refuelTank(tank));&#10;        assertTrue(tank.getFuel() &gt; fuelBeforeRefill);&#10;    }&#10;&#10;    @Test&#10;    void testSuppliesDepletion() {&#10;        tank.setPosition(new Position(1, 0));&#10;        tank.takeDamage(50);&#10;&#10;        int initialSupplies = engineer.getSupplies();&#10;        engineer.repair(tank);&#10;        assertTrue(engineer.getSupplies() &lt; initialSupplies);&#10;    }&#10;&#10;    @Test&#10;    void testCannotRepairWithoutSupplies() {&#10;        tank.setPosition(new Position(1, 0));&#10;&#10;        // Deplete supplies through repairs&#10;        while(engineer.getSupplies() &gt;= 20) {&#10;            tank.takeDamage(50);&#10;            engineer.repair(tank);&#10;        }&#10;&#10;        tank.takeDamage(50);&#10;        assertFalse(engineer.repair(tank));&#10;    }&#10;&#10;    @Test&#10;    void testResupply() {&#10;        engineer.repair(tank); // Use some supplies&#10;        int suppliesBeforeResupply = engineer.getSupplies();&#10;        engineer.resupply(30);&#10;        assertTrue(engineer.getSupplies() &gt; suppliesBeforeResupply);&#10;        assertTrue(engineer.getSupplies() &lt;= 100);&#10;    }&#10;&#10;    @Test&#10;    void testRangeLimit() {&#10;        tank.setPosition(new Position(2, 2)); // Too far&#10;        tank.takeDamage(50);&#10;&#10;        assertFalse(engineer.repair(tank));&#10;        assertFalse(engineer.refuelTank(tank));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package university.jala.legion.model.units;&#13;&#10;&#13;&#10;import org.junit.jupiter.api.BeforeEach;&#13;&#10;import org.junit.jupiter.api.Test;&#13;&#10;import university.jala.legion.model.Position;&#13;&#10;import static org.junit.jupiter.api.Assertions.*;&#13;&#10;&#13;&#10;class EngineerTest {&#13;&#10;    private Engineer engineer;&#13;&#10;    private Tank tank;&#13;&#10;&#13;&#10;    @BeforeEach&#13;&#10;    void setUp() {&#13;&#10;        engineer = new Engineer(&quot;TestEngineer&quot;, 2);&#13;&#10;        tank = new Tank(&quot;TestTank&quot;, 3);&#13;&#10;        // Set initial positions for both units&#13;&#10;        engineer.setPosition(new Position(0, 0));&#13;&#10;        tank.setPosition(new Position(1, 0));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testEngineerCreation() {&#13;&#10;        assertNotNull(engineer);&#13;&#10;        assertEquals(&quot;TestEngineer&quot;, engineer.getName());&#13;&#10;        assertEquals(2, engineer.getRank());&#13;&#10;        assertTrue(engineer.isAlive());&#13;&#10;        assertEquals(100, engineer.getSupplies());&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testRepairTank() {&#13;&#10;        tank.takeDamage(50);&#13;&#10;        int healthBeforeRepair = tank.getHealth();&#13;&#10;&#13;&#10;        assertTrue(engineer.repair(tank));&#13;&#10;        assertTrue(tank.getHealth() &gt; healthBeforeRepair);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testCannotRepairNonTankUnits() {&#13;&#10;        Infantry infantry = new Infantry(&quot;TestInfantry&quot;, 1);&#13;&#10;        infantry.takeDamage(50);&#13;&#10;        infantry.setPosition(new Position(1, 0));&#13;&#10;&#13;&#10;        assertFalse(engineer.repair(infantry));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testRefuelTank() {&#13;&#10;        // Use some fuel&#13;&#10;        tank.move(new Position(0, 0));&#13;&#10;        int fuelBeforeRefill = tank.getFuel();&#13;&#10;&#13;&#10;        assertTrue(engineer.refuelTank(tank));&#13;&#10;        assertTrue(tank.getFuel() &gt; fuelBeforeRefill);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testSuppliesDepletion() {&#13;&#10;        tank.setPosition(new Position(1, 0));&#13;&#10;        tank.takeDamage(50);&#13;&#10;&#13;&#10;        int initialSupplies = engineer.getSupplies();&#13;&#10;        engineer.repair(tank);&#13;&#10;        assertTrue(engineer.getSupplies() &lt; initialSupplies);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testCannotRepairWithoutSupplies() {&#13;&#10;        tank.setPosition(new Position(1, 0));&#13;&#10;&#13;&#10;        // Deplete supplies through repairs&#13;&#10;        while(engineer.getSupplies() &gt;= 20) {&#13;&#10;            tank.takeDamage(50);&#13;&#10;            engineer.repair(tank);&#13;&#10;        }&#13;&#10;&#13;&#10;        tank.takeDamage(50);&#13;&#10;        assertFalse(engineer.repair(tank));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testResupply() {&#13;&#10;        engineer.repair(tank); // Use some supplies&#13;&#10;        int suppliesBeforeResupply = engineer.getSupplies();&#13;&#10;        engineer.resupply(30);&#13;&#10;        assertTrue(engineer.getSupplies() &gt; suppliesBeforeResupply);&#13;&#10;        assertTrue(engineer.getSupplies() &lt;= 100);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testRangeLimit() {&#13;&#10;        tank.setPosition(new Position(2, 2)); // Too far&#13;&#10;        tank.takeDamage(50);&#13;&#10;&#13;&#10;        assertFalse(engineer.repair(tank));&#13;&#10;        assertFalse(engineer.refuelTank(tank));&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/university/jala/legion/model/units/InfantryTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/university/jala/legion/model/units/InfantryTest.java" />
              <option name="updatedContent" value="package university.jala.legion.model.units;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import university.jala.legion.model.Position;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class InfantryTest {&#10;    private Infantry infantry;&#10;    &#10;    @BeforeEach&#10;    void setUp() {&#10;        infantry = new Infantry(&quot;TestInfantry&quot;, 1);&#10;    }&#10;    &#10;    @Test&#10;    void testInfantryCreation() {&#10;        assertNotNull(infantry);&#10;        assertEquals(&quot;TestInfantry&quot;, infantry.getName());&#10;        assertEquals(1, infantry.getRank());&#10;        assertTrue(infantry.isAlive());&#10;        assertEquals(100, infantry.getAmmunition());&#10;    }&#10;    &#10;    @Test&#10;    void testValidMovement() {&#10;        Position newPos = new Position(1, 0);&#10;        infantry.move(newPos);&#10;        assertEquals(newPos, infantry.getPosition());&#10;    }&#10;    &#10;    @Test&#10;    void testInvalidMovement() {&#10;        Position invalidPos = new Position(2, 2);&#10;        assertThrows(IllegalArgumentException.class, () -&gt; infantry.move(invalidPos));&#10;    }&#10;    &#10;    @Test&#10;    void testAttack() {&#10;        Infantry target = new Infantry(&quot;Target&quot;, 1);&#10;        target.setPosition(new Position(1, 0));&#10;        infantry.attack(target);&#10;        assertTrue(target.getHealth() &lt; 100);&#10;    }&#10;    &#10;    @Test&#10;    void testAttackOutOfRange() {&#10;        Infantry target = new Infantry(&quot;Target&quot;, 1);&#10;        target.setPosition(new Position(3, 3));&#10;        int initialHealth = target.getHealth();&#10;        infantry.attack(target);&#10;        assertEquals(initialHealth, target.getHealth());&#10;    }&#10;    &#10;    @Test&#10;    void testAmmunitionDepletion() {&#10;        Infantry target = new Infantry(&quot;Target&quot;, 1);&#10;        target.setPosition(new Position(1, 0));&#10;        &#10;        int initialAmmo = infantry.getAmmunition();&#10;        infantry.attack(target);&#10;        assertTrue(infantry.getAmmunition() &lt; initialAmmo);&#10;    }&#10;    &#10;    @Test&#10;    void testResupplyAmmunition() {&#10;        infantry.attack(new Infantry(&quot;Target&quot;, 1));&#10;        int ammoBeforeResupply = infantry.getAmmunition();&#10;        infantry.resupplyAmmunition(50);&#10;        assertTrue(infantry.getAmmunition() &gt; ammoBeforeResupply);&#10;        assertTrue(infantry.getAmmunition() &lt;= 100);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/university/jala/legion/model/units/MedicTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/university/jala/legion/model/units/MedicTest.java" />
              <option name="originalContent" value="package university.jala.legion.model.units;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import university.jala.legion.model.Position;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class MedicTest {&#10;    private Medic medic;&#10;    private Infantry patient;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        medic = new Medic(&quot;TestMedic&quot;, 2);&#10;        patient = new Infantry(&quot;TestPatient&quot;, 1);&#10;        medic.setPosition(new Position(0, 0));  // Set initial position for medic&#10;    }&#10;&#10;    @Test&#10;    void testMedicCreation() {&#10;        assertNotNull(medic);&#10;        assertEquals(&quot;TestMedic&quot;, medic.getName());&#10;        assertEquals(2, medic.getRank());&#10;        assertTrue(medic.isAlive());&#10;        assertEquals(100, medic.getHealingSupplies());&#10;    }&#10;&#10;    @Test&#10;    void testHealing() {&#10;        patient.takeDamage(50);&#10;        int healthBeforeHeal = patient.getHealth();&#10;        patient.setPosition(new Position(1, 0));&#10;&#10;        assertTrue(medic.heal(patient));&#10;        assertTrue(patient.getHealth() &gt; healthBeforeHeal);&#10;    }&#10;&#10;    @Test&#10;    void testHealingRangeLimit() {&#10;        patient.takeDamage(50);&#10;        patient.setPosition(new Position(3, 0)); // Too far&#10;&#10;        int healthBeforeHeal = patient.getHealth();&#10;        assertFalse(medic.heal(patient));&#10;        assertEquals(healthBeforeHeal, patient.getHealth());&#10;    }&#10;&#10;    @Test&#10;    void testHealingSuppliesDepletion() {&#10;        patient.takeDamage(50);&#10;        patient.setPosition(new Position(1, 0));&#10;&#10;        int initialSupplies = medic.getHealingSupplies();&#10;        medic.heal(patient);&#10;        assertTrue(medic.getHealingSupplies() &lt; initialSupplies);&#10;    }&#10;&#10;    @Test&#10;    void testCannotHealWithoutSupplies() {&#10;        // Deplete supplies&#10;        while(medic.getHealingSupplies() &gt;= 20) {&#10;            patient.takeDamage(50);&#10;            patient.setPosition(new Position(1, 0));&#10;            medic.heal(patient);&#10;        }&#10;&#10;        patient.takeDamage(50);&#10;        assertFalse(medic.heal(patient));&#10;    }&#10;&#10;    @Test&#10;    void testResupply() {&#10;        patient.setPosition(new Position(1, 0));  // Set patient position first&#10;        patient.takeDamage(50);  // Ensure patient needs healing&#10;        medic.heal(patient); // Use some supplies&#10;        int suppliesBeforeResupply = medic.getHealingSupplies();&#10;        medic.resupply(30);&#10;        assertTrue(medic.getHealingSupplies() &gt; suppliesBeforeResupply);&#10;        assertTrue(medic.getHealingSupplies() &lt;= 100);&#10;    }&#10;&#10;    @Test&#10;    void testLimitedCombatCapabilities() {&#10;        Infantry enemy = new Infantry(&quot;Enemy&quot;, 1);&#10;        enemy.setPosition(new Position(1, 0));&#10;&#10;        int enemyInitialHealth = enemy.getHealth();&#10;        medic.attack(enemy);&#10;&#10;        // Medic should do minimal damage&#10;        assertTrue(enemy.getHealth() &gt; enemyInitialHealth - 10);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package university.jala.legion.model.units;&#13;&#10;&#13;&#10;import org.junit.jupiter.api.BeforeEach;&#13;&#10;import org.junit.jupiter.api.Test;&#13;&#10;import university.jala.legion.model.Position;&#13;&#10;import static org.junit.jupiter.api.Assertions.*;&#13;&#10;&#13;&#10;class MedicTest {&#13;&#10;    private Medic medic;&#13;&#10;    private Infantry patient;&#13;&#10;&#13;&#10;    @BeforeEach&#13;&#10;    void setUp() {&#13;&#10;        medic = new Medic(&quot;TestMedic&quot;, 2);&#13;&#10;        patient = new Infantry(&quot;TestPatient&quot;, 1);&#13;&#10;        medic.setPosition(new Position(0, 0));  // Set initial position for medic&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testMedicCreation() {&#13;&#10;        assertNotNull(medic);&#13;&#10;        assertEquals(&quot;TestMedic&quot;, medic.getName());&#13;&#10;        assertEquals(2, medic.getRank());&#13;&#10;        assertTrue(medic.isAlive());&#13;&#10;        assertEquals(100, medic.getHealingSupplies());&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testHealing() {&#13;&#10;        patient.takeDamage(50);&#13;&#10;        int healthBeforeHeal = patient.getHealth();&#13;&#10;        patient.setPosition(new Position(1, 0));&#13;&#10;&#13;&#10;        assertTrue(medic.heal(patient));&#13;&#10;        assertTrue(patient.getHealth() &gt; healthBeforeHeal);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testHealingRangeLimit() {&#13;&#10;        patient.takeDamage(50);&#13;&#10;        patient.setPosition(new Position(3, 0)); // Too far&#13;&#10;&#13;&#10;        int healthBeforeHeal = patient.getHealth();&#13;&#10;        assertFalse(medic.heal(patient));&#13;&#10;        assertEquals(healthBeforeHeal, patient.getHealth());&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testHealingSuppliesDepletion() {&#13;&#10;        patient.takeDamage(50);&#13;&#10;        patient.setPosition(new Position(1, 0));&#13;&#10;&#13;&#10;        int initialSupplies = medic.getHealingSupplies();&#13;&#10;        medic.heal(patient);&#13;&#10;        assertTrue(medic.getHealingSupplies() &lt; initialSupplies);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testCannotHealWithoutSupplies() {&#13;&#10;        patient.setPosition(new Position(1, 0));&#13;&#10;        // Initial supplies is 100, each heal costs 20, so 5 heals should deplete supplies&#13;&#10;        for (int i = 0; i &lt; 5; i++) {&#13;&#10;            patient.takeDamage(50);&#13;&#10;            medic.heal(patient);&#13;&#10;        }&#13;&#10;&#13;&#10;        patient.takeDamage(50);&#13;&#10;        assertFalse(medic.heal(patient));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testResupply() {&#13;&#10;        patient.setPosition(new Position(1, 0));  // Set patient position first&#13;&#10;        patient.takeDamage(50);  // Ensure patient needs healing&#13;&#10;        medic.heal(patient); // Use some supplies&#13;&#10;        int suppliesBeforeResupply = medic.getHealingSupplies();&#13;&#10;        medic.resupply(30);&#13;&#10;        assertTrue(medic.getHealingSupplies() &gt; suppliesBeforeResupply);&#13;&#10;        assertTrue(medic.getHealingSupplies() &lt;= 100);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Test&#13;&#10;    void testLimitedCombatCapabilities() {&#13;&#10;        Infantry enemy = new Infantry(&quot;Enemy&quot;, 1);&#13;&#10;        enemy.setPosition(new Position(1, 0));&#13;&#10;&#13;&#10;        int enemyInitialHealth = enemy.getHealth();&#13;&#10;        medic.attack(enemy);&#13;&#10;&#13;&#10;        // Medic should do minimal damage&#13;&#10;        assertTrue(enemy.getHealth() &gt; enemyInitialHealth - 10);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/university/jala/legion/model/units/SniperTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/university/jala/legion/model/units/SniperTest.java" />
              <option name="updatedContent" value="package university.jala.legion.model.units;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import university.jala.legion.model.Position;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class SniperTest {&#10;    private Sniper sniper;&#10;    &#10;    @BeforeEach&#10;    void setUp() {&#10;        sniper = new Sniper(&quot;TestSniper&quot;, 2);&#10;    }&#10;    &#10;    @Test&#10;    void testSniperCreation() {&#10;        assertNotNull(sniper);&#10;        assertEquals(&quot;TestSniper&quot;, sniper.getName());&#10;        assertEquals(2, sniper.getRank());&#10;        assertTrue(sniper.isAlive());&#10;        assertFalse(sniper.isHidden());&#10;    }&#10;    &#10;    @Test&#10;    void testHideMechanic() {&#10;        assertFalse(sniper.isHidden());&#10;        sniper.hide();&#10;        assertTrue(sniper.isHidden());&#10;    }&#10;    &#10;    @Test&#10;    void testMovementBreaksHide() {&#10;        sniper.hide();&#10;        assertTrue(sniper.isHidden());&#10;        sniper.move(new Position(1, 0));&#10;        assertFalse(sniper.isHidden());&#10;    }&#10;    &#10;    @Test&#10;    void testLongRangeAttack() {&#10;        Sniper target = new Sniper(&quot;Target&quot;, 1);&#10;        target.setPosition(new Position(5, 0));&#10;        int initialHealth = target.getHealth();&#10;        sniper.attack(target);&#10;        assertTrue(target.getHealth() &lt; initialHealth);&#10;    }&#10;    &#10;    @Test&#10;    void testHiddenBonusDamage() {&#10;        Sniper target = new Sniper(&quot;Target&quot;, 1);&#10;        target.setPosition(new Position(5, 0));&#10;        &#10;        // Record normal damage&#10;        int initialHealth = target.getHealth();&#10;        sniper.attack(target);&#10;        int normalDamage = initialHealth - target.getHealth();&#10;        &#10;        // Reset target and test hidden damage&#10;        target = new Sniper(&quot;Target&quot;, 1);&#10;        target.setPosition(new Position(5, 0));&#10;        initialHealth = target.getHealth();&#10;        sniper.hide();&#10;        sniper.attack(target);&#10;        int hiddenDamage = initialHealth - target.getHealth();&#10;        &#10;        assertTrue(hiddenDamage &gt; normalDamage);&#10;    }&#10;    &#10;    @Test&#10;    void testAttackRevealsStealth() {&#10;        sniper.hide();&#10;        assertTrue(sniper.isHidden());&#10;        &#10;        Sniper target = new Sniper(&quot;Target&quot;, 1);&#10;        target.setPosition(new Position(5, 0));&#10;        sniper.attack(target);&#10;        &#10;        assertFalse(sniper.isHidden());&#10;    }&#10;    &#10;    @Test&#10;    void testAmmunitionManagement() {&#10;        int initialAmmo = sniper.getAmmunition();&#10;        sniper.resupplyAmmunition(10);&#10;        assertTrue(sniper.getAmmunition() &lt;= 20);&#10;        &#10;        Sniper target = new Sniper(&quot;Target&quot;, 1);&#10;        target.setPosition(new Position(5, 0));&#10;        sniper.attack(target);&#10;        assertTrue(sniper.getAmmunition() &lt; initialAmmo);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/university/jala/legion/model/units/TankTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/university/jala/legion/model/units/TankTest.java" />
              <option name="updatedContent" value="package university.jala.legion.model.units;&#10;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import university.jala.legion.model.Position;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class TankTest {&#10;    private Tank tank;&#10;    &#10;    @BeforeEach&#10;    void setUp() {&#10;        tank = new Tank(&quot;TestTank&quot;, 3);&#10;    }&#10;    &#10;    @Test&#10;    void testTankCreation() {&#10;        assertNotNull(tank);&#10;        assertEquals(&quot;TestTank&quot;, tank.getName());&#10;        assertEquals(3, tank.getRank());&#10;        assertTrue(tank.isAlive());&#10;        assertEquals(100, tank.getFuel());&#10;        assertFalse(tank.isShieldActive());&#10;    }&#10;    &#10;    @Test&#10;    void testShieldActivation() {&#10;        assertFalse(tank.isShieldActive());&#10;        tank.activateShield();&#10;        assertTrue(tank.isShieldActive());&#10;        assertTrue(tank.getFuel() &lt; 100);&#10;    }&#10;    &#10;    @Test&#10;    void testMovementConsumeFuel() {&#10;        int initialFuel = tank.getFuel();&#10;        tank.move(new Position(1, 0));&#10;        assertTrue(tank.getFuel() &lt; initialFuel);&#10;    }&#10;    &#10;    @Test&#10;    void testCannotMoveWithoutFuel() {&#10;        // Deplete fuel through movements&#10;        while(tank.getFuel() &gt; 0) {&#10;            tank.move(new Position(tank.getPosition().getX() ^ 1, 0));&#10;        }&#10;        Position finalPos = tank.getPosition();&#10;        assertThrows(IllegalStateException.class, () -&gt; tank.move(new Position(finalPos.getX() ^ 1, 0)));&#10;    }&#10;    &#10;    @Test&#10;    void testDamageReductionWithShield() {&#10;        Tank target = new Tank(&quot;Target&quot;, 1);&#10;        &#10;        // Test damage without shield&#10;        int initialHealth = target.getHealth();&#10;        tank.attack(target);&#10;        int damageWithoutShield = initialHealth - target.getHealth();&#10;        &#10;        // Test damage with shield&#10;        target = new Tank(&quot;Target&quot;, 1);&#10;        target.activateShield();&#10;        initialHealth = target.getHealth();&#10;        tank.attack(target);&#10;        int damageWithShield = initialHealth - target.getHealth();&#10;        &#10;        assertTrue(damageWithShield &lt; damageWithoutShield);&#10;    }&#10;    &#10;    @Test&#10;    void testFuelRefill() {&#10;        tank.move(new Position(1, 0)); // Consume some fuel&#10;        int fuelBeforeRefill = tank.getFuel();&#10;        tank.refuel(30);&#10;        assertTrue(tank.getFuel() &gt; fuelBeforeRefill);&#10;        assertTrue(tank.getFuel() &lt;= 100);&#10;    }&#10;    &#10;    @Test&#10;    void testShieldDeactivation() {&#10;        tank.activateShield();&#10;        assertTrue(tank.isShieldActive());&#10;        tank.deactivateShield();&#10;        assertFalse(tank.isShieldActive());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test/java/university/jala/legion/model/units/EngineerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test/java/university/jala/legion/model/units/EngineerTest.java" />
              <option name="updatedContent" value="    @Test&#10;    void testRepairTank() {&#10;        // Make sure tank is damaged first&#10;        tank.takeDamage(50);&#10;        int healthBeforeRepair = tank.getHealth();&#10;        &#10;        // Attempt repair&#10;        boolean repairResult = engineer.repair(tank);&#10;        &#10;        assertTrue(repairResult, &quot;Engineer should successfully repair the tank&quot;);&#10;        int healthAfterRepair = tank.getHealth();&#10;        assertTrue(healthAfterRepair &gt; healthBeforeRepair, &quot;Tank's health should increase after repair&quot;);&#10;    }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>