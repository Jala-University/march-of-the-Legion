@startuml class-diagram
!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 12
skinparam packageFontSize 14

package "university.jala.legion" {
    class Main {
        +main(String[] args)
        -createUnits(int[] distribution, String type) : List<Character>
        -calculateTotalTroops(int[] distribution) : int
        -getOrientationName(String orientation) : String
    }
}

package "university.jala.legion.cli" {
    class Parameters {
        -algorithm : String
        -type : String
        -orientation : String
        -unitDistribution : int[]
        -battlefieldSize : int
        +Parameters(String[] args)
        -parseUnitDistribution(String value) : int[]
        -parseBattlefieldSize(String value) : int
        -validateParameters()
        -isValidAlgorithm(String code) : boolean
        +getAlgorithm() : String
        +getType() : String
        +getOrientation() : String
        +getUnitDistribution() : int[]
        +getBattlefieldSize() : int
    }
}

package "university.jala.legion.model" {
    abstract class Character {
        -type : String
        -rank : int
        -numericValue : String
        -characterValue : String
        -position : Position
        +Character(String type)
        +getRank() : int
        +getDisplayValue() : String
        +getPosition() : Position
        +setPosition(Position position)
        +compareTo(Character other) : int
    }

    class Position {
        -x : int
        -y : int
        +Position(int x, int y)
        +getX() : int
        +getY() : int
    }

    class Battlefield {
        -size : int
        -grid : String[][]
        -availablePositions : List<Position>
        -currentUnits : List<Character>
        +Battlefield(int size)
        -initializeGrid()
        +placeUnitsRandomly(List<Character> units)
        +placeUnitsInFormation(List<Character> units, String orientation)
        +renderInitial(boolean isNumeric)
        +renderFinal(boolean isNumeric)
        -render()
    }
}

package "university.jala.legion.model.units" {
    class Commander {
        +Commander(String type)
        -getRandomNumericValue(int min, int max) : String
        -getRandomCharacterValue(char min, char max) : String
    }

    class Medic {
        +Medic(String type)
        -getRandomNumericValue(int min, int max) : String
        -getRandomCharacterValue(char min, char max) : String
    }

    class Tank {
        +Tank(String type)
        -getRandomNumericValue(int min, int max) : String
        -getRandomCharacterValue(char min1, char max1, char min2, char max2) : String
    }

    class Sniper {
        +Sniper(String type)
        -getRandomNumericValue(int min, int max) : String
        -getRandomCharacterValue(char min1, char max1, char min2, char max2) : String
    }

    class Infantry {
        +Infantry(String type)
        -getRandomNumericValue(int min, int max) : String
        -getRandomCharacterValue(char min, char max) : String
    }
}

package "university.jala.legion.sorting" {
    interface SortingStrategy {
        +sort(List<Character> units)
        +getName() : String
    }

    class InsertionSort {
        +sort(List<Character> units)
        +getName() : String
    }

    class QuickSort {
        +sort(List<Character> units)
        +getName() : String
    }

    class CountingSort {
        +sort(List<Character> units)
        +getName() : String
    }

    class RadixSort {
        +sort(List<Character> units)
        +getName() : String
    }

    class SortingStrategyFactory {
        +{static}createStrategy(String algorithmCode) : SortingStrategy
    }
}

' Relationships
Main --> Parameters : uses
Main --> Battlefield : creates
Main --> Character : manages
Main --> SortingStrategyFactory : uses

Parameters --> Main : provides configuration

Character <|-- Commander
Character <|-- Medic
Character <|-- Tank
Character <|-- Sniper
Character <|-- Infantry

Character --> Position : has

Battlefield --> Character : contains
Battlefield --> Position : uses

SortingStrategy <|.. InsertionSort
SortingStrategy <|.. QuickSort
SortingStrategy <|.. CountingSort
SortingStrategy <|.. RadixSort

SortingStrategyFactory --> SortingStrategy : creates
SortingStrategyFactory --> InsertionSort : instantiates
SortingStrategyFactory --> QuickSort : instantiates
SortingStrategyFactory --> CountingSort : instantiates
SortingStrategyFactory --> RadixSort : instantiates

Main --> SortingStrategy : uses via factory

@enduml