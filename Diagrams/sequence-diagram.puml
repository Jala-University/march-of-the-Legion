@startuml sequence-diagram
!theme plain
skinparam sequenceArrowThickness 2
skinparam roundcorner 20
skinparam sequenceMessageAlign center

title March of the Legion - Enhanced Execution Flow

actor User
participant Main
participant Parameters
participant Battlefield
participant "Unit:Character" as Unit
participant InsertionSort
participant SortingStrategyFactory

User -> Main : java -jar legion.jar a=i u=2,1,1,1,3 t=c o=s f=8
activate Main

Main -> Parameters : new Parameters(args)
activate Parameters
Parameters -> Parameters : parseArgs(args)
Parameters -> Parameters : validateParameters()
note right of Parameters
    **Enhanced validation:**
    • Algorithm (a=i,q,c,r)
    • Unit distribution (5 values)
    • Display type (t=c,n)
    • Orientation (o=n,s,e,w)
    • Battlefield size (f=5-1000)
end note
Parameters --> Main : Parameters instance
deactivate Parameters

Main -> SortingStrategyFactory : createStrategy("i")
activate SortingStrategyFactory
SortingStrategyFactory -> InsertionSort : new InsertionSort()
activate InsertionSort
InsertionSort --> SortingStrategyFactory : InsertionSort instance
deactivate InsertionSort
SortingStrategyFactory --> Main : SortingStrategy
deactivate SortingStrategyFactory

Main -> Parameters : getUnitDistribution()
activate Parameters
Parameters --> Main : int[] {2,1,1,1,3}
deactivate Parameters

Main -> Parameters : getType()
activate Parameters
Parameters --> Main : "c"
deactivate Parameters

Main -> Parameters : getOrientation()
activate Parameters
Parameters --> Main : "s"
deactivate Parameters

Main -> Parameters : getBattlefieldSize()
activate Parameters
Parameters --> Main : 8
deactivate Parameters

Main -> Main : createUnits(distribution, "c")
activate Main
loop for each unit type
    Main -> Unit : new Commander("c"), new Medic("c"), etc.
    activate Unit
    note right of Unit
        **Random display values:**
        • Character mode: random letters
        • Numeric mode: random numbers
        • Type-specific ranges
    end note
    Unit --> Main : Character instance
    deactivate Unit
end
Main --> Main : List<Character>
deactivate Main

Main -> Battlefield : new Battlefield(8)
activate Battlefield
Battlefield --> Main : Battlefield instance

Main -> Battlefield : placeUnitsRandomly(units)
Battlefield -> Battlefield : initializeGrid()
Battlefield -> Battlefield : shuffle available positions
loop for each unit
    Battlefield -> Unit : setPosition(random position)
    activate Unit
    Unit --> Battlefield :
    deactivate Unit
    Battlefield -> Battlefield : update grid
end
Battlefield --> Main : units placed

Main -> User : print configuration\n(Algorithm, Type, Orientation, Troops, Battlefield)

Main -> Battlefield : renderInitial(useNumeric=false)
Battlefield --> Main : initial grid string
Main -> User : print "Initial Position:\n" + grid
deactivate Battlefield

Main -> InsertionSort : sort(units)
activate InsertionSort
loop i = 1 to units.size()-1
    InsertionSort -> Unit : compareTo(other)
    activate Unit
    Unit --> InsertionSort : comparison result
    deactivate Unit
    InsertionSort -> InsertionSort : insertion sort logic
end
InsertionSort --> Main : units sorted by military rank
deactivate InsertionSort

Main -> Battlefield : placeUnitsInFormation(units, "s")
activate Battlefield
Battlefield -> Battlefield : clear grid
note right of Battlefield
    **South formation:**
    Fill from bottom-left,
    column by column
end note
loop for each unit in sorted order
    Battlefield -> Battlefield : place in formation pattern
    Battlefield -> Unit : update position
    activate Unit
    Unit --> Battlefield :
    deactivate Unit
end
Battlefield --> Main : formation placed

Main -> Battlefield : renderFinal(useNumeric=false)
Battlefield --> Main : final grid string
deactivate Battlefield

Main -> User : print "Final Position:\n" + grid

deactivate Main

@enduml